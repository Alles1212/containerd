"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-raw";
exports.ids = ["vendor-chunks/hast-util-raw"];
exports.modules = {

/***/ "(ssr)/./node_modules/hast-util-raw/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/hast-util-raw/lib/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raw: () => (/* binding */ raw)\n/* harmony export */ });\n/* harmony import */ var _ungap_structured_clone__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ungap/structured-clone */ \"(ssr)/./node_modules/@ungap/structured-clone/esm/index.js\");\n/* harmony import */ var hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-from-parse5 */ \"(ssr)/./node_modules/hast-util-from-parse5/lib/index.js\");\n/* harmony import */ var hast_util_to_parse5__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! hast-util-to-parse5 */ \"(ssr)/./node_modules/hast-util-to-parse5/lib/index.js\");\n/* harmony import */ var html_void_elements__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! html-void-elements */ \"(ssr)/./node_modules/html-void-elements/index.js\");\n/* harmony import */ var parse5__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse5 */ \"(ssr)/./node_modules/parse5/dist/index.js\");\n/* harmony import */ var unist_util_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-position */ \"(ssr)/./node_modules/unist-util-position/lib/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-visit */ \"(ssr)/./node_modules/unist-util-visit/lib/index.js\");\n/* harmony import */ var web_namespaces__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! web-namespaces */ \"(ssr)/./node_modules/web-namespaces/index.js\");\n/* harmony import */ var zwitch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zwitch */ \"(ssr)/./node_modules/zwitch/index.js\");\n/**\n * @import {Options} from 'hast-util-raw'\n * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'\n * @import {Point} from 'unist'\n */ /**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */ /**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that weâ€™ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */ \n\n\n\n\n\n\n\n\nconst gfmTagfilterExpression = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\\t\\n\\f\\r />])/gi;\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n    \"mdxFlowExpression\",\n    \"mdxJsxFlowElement\",\n    \"mdxJsxTextElement\",\n    \"mdxTextExpression\",\n    \"mdxjsEsm\"\n]);\n/** @type {ParserOptions<DefaultTreeAdapterMap>} */ const parseOptions = {\n    sourceCodeLocationInfo: true,\n    scriptingEnabled: false\n};\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */ function raw(tree, options) {\n    const document = documentMode(tree);\n    /** @type {(node: Nodes, state: State) => undefined} */ const one = (0,zwitch__WEBPACK_IMPORTED_MODULE_1__.zwitch)(\"type\", {\n        handlers: {\n            root,\n            element,\n            text,\n            comment,\n            doctype,\n            raw: handleRaw\n        },\n        unknown\n    });\n    /** @type {State} */ const state = {\n        parser: document ? new parse5__WEBPACK_IMPORTED_MODULE_0__.Parser(parseOptions) : parse5__WEBPACK_IMPORTED_MODULE_0__.Parser.getFragmentParser(undefined, parseOptions),\n        handle (node) {\n            one(node, state);\n        },\n        stitches: false,\n        options: options || {}\n    };\n    one(tree, state);\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)());\n    const p5 = document ? state.parser.document : state.parser.getFragment();\n    const result = (0,hast_util_from_parse5__WEBPACK_IMPORTED_MODULE_3__.fromParse5)(p5, {\n        // To do: support `space`?\n        file: state.options.file\n    });\n    if (state.stitches) {\n        (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_4__.visit)(result, \"comment\", function(node, index, parent) {\n            const stitch = /** @type {unknown} */ node;\n            if (stitch.value.stitch && parent && index !== undefined) {\n                /** @type {Array<RootContent>} */ const siblings = parent.children;\n                // @ts-expect-error: assume the stitch is allowed.\n                siblings[index] = stitch.value.stitch;\n                return index;\n            }\n        });\n    }\n    // Unpack if possible and when not given a `root`.\n    if (result.type === \"root\" && result.children.length === 1 && result.children[0].type === tree.type) {\n        return result.children[0];\n    }\n    return result;\n}\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function all(nodes, state) {\n    let index = -1;\n    /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */ if (nodes) {\n        while(++index < nodes.length){\n            state.handle(nodes[index]);\n        }\n    }\n}\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function root(node, state) {\n    all(node.children, state);\n}\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function element(node, state) {\n    startTag(node, state);\n    all(node.children, state);\n    endTag(node, state);\n}\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function text(node, state) {\n    // Allow `DATA` through `PLAINTEXT`,\n    // but when hanging in a tag for example,\n    // switch back to `DATA`.\n    // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n    // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n    if (state.parser.tokenizer.state > 4) {\n        state.parser.tokenizer.state = 0;\n    }\n    /** @type {Token.CharacterToken} */ const token = {\n        type: parse5__WEBPACK_IMPORTED_MODULE_0__.Token.TokenType.CHARACTER,\n        chars: node.value,\n        location: createParse5Location(node)\n    };\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node));\n    // @ts-expect-error: private.\n    state.parser.currentToken = token;\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken);\n}\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function doctype(node, state) {\n    /** @type {Token.DoctypeToken} */ const token = {\n        type: parse5__WEBPACK_IMPORTED_MODULE_0__.Token.TokenType.DOCTYPE,\n        name: \"html\",\n        forceQuirks: false,\n        publicId: \"\",\n        systemId: \"\",\n        location: createParse5Location(node)\n    };\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node));\n    // @ts-expect-error: private.\n    state.parser.currentToken = token;\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken);\n}\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function stitch(node, state) {\n    // Mark that there are stitches, so we need to walk the tree and revert them.\n    state.stitches = true;\n    /** @type {Nodes} */ const clone = cloneWithoutChildren(node);\n    // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n    // passed through node).\n    if (\"children\" in node && \"children\" in clone) {\n        // Root in root out.\n        const fakeRoot = /** @type {Root} */ raw({\n            type: \"root\",\n            children: node.children\n        }, state.options);\n        clone.children = fakeRoot.children;\n    }\n    // Hack: `value` is supposed to be a string, but as none of the tools\n    // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n    // through.\n    comment({\n        type: \"comment\",\n        value: {\n            stitch: clone\n        }\n    }, state);\n}\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function comment(node, state) {\n    /** @type {string} */ // @ts-expect-error: we pass stitches through.\n    const data = node.value;\n    /** @type {Token.CommentToken} */ const token = {\n        type: parse5__WEBPACK_IMPORTED_MODULE_0__.Token.TokenType.COMMENT,\n        data,\n        location: createParse5Location(node)\n    };\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node));\n    // @ts-expect-error: private.\n    state.parser.currentToken = token;\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken);\n}\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function handleRaw(node, state) {\n    // Reset preprocessor:\n    // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n    state.parser.tokenizer.preprocessor.html = \"\";\n    state.parser.tokenizer.preprocessor.pos = -1;\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lastGapPos = -2;\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.gapStack = [];\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.skipNextNewLine = false;\n    state.parser.tokenizer.preprocessor.lastChunkWritten = false;\n    state.parser.tokenizer.preprocessor.endOfChunkHit = false;\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.isEol = false;\n    // Now pass `node.value`.\n    setPoint(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node));\n    state.parser.tokenizer.write(state.options.tagfilter ? node.value.replace(gfmTagfilterExpression, \"&lt;$1$2\") : node.value, false);\n    // @ts-expect-error: private.\n    state.parser.tokenizer._runParsingLoop();\n    // Character references hang, so if we ended there, we need to flush\n    // those too.\n    // We reset the preprocessor as if the document ends here.\n    // Then one single call to the relevant state does the trick, parse5\n    // consumes the whole token.\n    // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n    // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n    // Note: a change to `parse5`, which breaks this, was merged but not released.\n    // Investigate when it is.\n    // To do: remove next major.\n    /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */ if (state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */  || // @ts-expect-error: removed.\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */ ) {\n        state.parser.tokenizer.preprocessor.lastChunkWritten = true;\n        /** @type {number} */ // @ts-expect-error: private.\n        const cp = state.parser.tokenizer._consume();\n        // @ts-expect-error: private.\n        state.parser.tokenizer._callState(cp);\n    }\n}\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */ function unknown(node_, state) {\n    const node = /** @type {Nodes} */ node_;\n    if (state.options.passThrough && state.options.passThrough.includes(node.type)) {\n        stitch(node, state);\n    } else {\n        let extra = \"\";\n        if (knownMdxNames.has(node.type)) {\n            extra = \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\";\n        }\n        throw new Error(\"Cannot compile `\" + node.type + \"` node\" + extra);\n    }\n}\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */ function resetTokenizer(state, point) {\n    setPoint(state, point);\n    // Process final characters if theyâ€™re still there after hibernating.\n    /** @type {Token.CharacterToken} */ // @ts-expect-error: private.\n    const token = state.parser.tokenizer.currentCharacterToken;\n    if (token && token.location) {\n        token.location.endLine = state.parser.tokenizer.preprocessor.line;\n        token.location.endCol = state.parser.tokenizer.preprocessor.col + 1;\n        token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1;\n        // @ts-expect-error: private.\n        state.parser.currentToken = token;\n        // @ts-expect-error: private.\n        state.parser._processToken(state.parser.currentToken);\n    }\n    // Reset tokenizer:\n    // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n    // Especially putting it back in the `data` state is useful: some elements,\n    // like textareas and iframes, change the state.\n    // See GH-7.\n    // But also if broken HTML is in `raw`, and then a correct element is given.\n    // See GH-11.\n    // @ts-expect-error: private.\n    state.parser.tokenizer.paused = false;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.inLoop = false;\n    // Note: donâ€™t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n    // manually update those when needed.\n    state.parser.tokenizer.active = false;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.returnState = parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.DATA;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.charRefCode = -1;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.consumedAfterSnapshot = -1;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentLocation = null;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentCharacterToken = null;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentToken = null;\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentAttr = {\n        name: \"\",\n        value: \"\"\n    };\n}\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */ function setPoint(state, point) {\n    if (point && point.offset !== undefined) {\n        /** @type {Token.Location} */ const location = {\n            startLine: point.line,\n            startCol: point.column,\n            startOffset: point.offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n        // @ts-expect-error: private.\n        // type-coverage:ignore-next-line\n        state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n        ;\n        state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset;\n        state.parser.tokenizer.preprocessor.line = point.line;\n        // @ts-expect-error: private.\n        state.parser.tokenizer.currentLocation = location;\n    }\n}\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function startTag(node, state) {\n    const tagName = node.tagName.toLowerCase();\n    // Ignore tags if weâ€™re in plain text.\n    if (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.PLAINTEXT) return;\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node));\n    const current = state.parser.openElements.current;\n    let ns = \"namespaceURI\" in current ? current.namespaceURI : web_namespaces__WEBPACK_IMPORTED_MODULE_5__.webNamespaces.html;\n    if (ns === web_namespaces__WEBPACK_IMPORTED_MODULE_5__.webNamespaces.html && tagName === \"svg\") {\n        ns = web_namespaces__WEBPACK_IMPORTED_MODULE_5__.webNamespaces.svg;\n    }\n    const result = (0,hast_util_to_parse5__WEBPACK_IMPORTED_MODULE_6__.toParse5)(// Shallow clone to not delve into `children`: we only need the attributes.\n    {\n        ...node,\n        children: []\n    }, {\n        space: ns === web_namespaces__WEBPACK_IMPORTED_MODULE_5__.webNamespaces.svg ? \"svg\" : \"html\"\n    });\n    /** @type {Token.TagToken} */ const tag = {\n        type: parse5__WEBPACK_IMPORTED_MODULE_0__.Token.TokenType.START_TAG,\n        tagName,\n        tagID: parse5__WEBPACK_IMPORTED_MODULE_0__.html.getTagID(tagName),\n        // We always send start and end tags.\n        selfClosing: false,\n        ackSelfClosing: false,\n        // Always element.\n        /* c8 ignore next */ attrs: \"attrs\" in result ? result.attrs : [],\n        location: createParse5Location(node)\n    };\n    // The HTML parsing algorithm works by doing half of the state management in\n    // the tokenizer and half in the parser.\n    // We canâ€™t use the tokenizer here, as we donâ€™t have strings.\n    // So we act *as if* the tokenizer emits tokens:\n    // @ts-expect-error: private.\n    state.parser.currentToken = tag;\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken);\n    // â€¦but then we still need a bunch of work that the tokenizer would normally\n    // do, such as:\n    // Set a tag name, similar to how the tokenizer would do it.\n    state.parser.tokenizer.lastStartTagName = tagName;\n// `inForeignNode` is correctly set by the parser.\n}\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */ function endTag(node, state) {\n    const tagName = node.tagName.toLowerCase();\n    // Do not emit closing tags for HTML void elements.\n    if (!state.parser.tokenizer.inForeignNode && html_void_elements__WEBPACK_IMPORTED_MODULE_7__.htmlVoidElements.includes(tagName)) {\n        return;\n    }\n    // Ignore tags if weâ€™re in plain text.\n    if (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.PLAINTEXT) return;\n    resetTokenizer(state, (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointEnd)(node));\n    /** @type {Token.TagToken} */ const tag = {\n        type: parse5__WEBPACK_IMPORTED_MODULE_0__.Token.TokenType.END_TAG,\n        tagName,\n        tagID: parse5__WEBPACK_IMPORTED_MODULE_0__.html.getTagID(tagName),\n        selfClosing: false,\n        ackSelfClosing: false,\n        attrs: [],\n        location: createParse5Location(node)\n    };\n    // The HTML parsing algorithm works by doing half of the state management in\n    // the tokenizer and half in the parser.\n    // We canâ€™t use the tokenizer here, as we donâ€™t have strings.\n    // So we act *as if* the tokenizer emits tokens:\n    // @ts-expect-error: private.\n    state.parser.currentToken = tag;\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken);\n    // â€¦but then we still need a bunch of work that the tokenizer would normally\n    // do, such as:\n    // Switch back to the data state after alternative states that donâ€™t accept\n    // tags:\n    if (// Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName && // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.RCDATA || // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`\n    state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.RAWTEXT || // `<script>`\n    state.parser.tokenizer.state === parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.SCRIPT_DATA)) {\n        state.parser.tokenizer.state = parse5__WEBPACK_IMPORTED_MODULE_0__.TokenizerMode.DATA;\n    }\n}\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */ function documentMode(node) {\n    const head = node.type === \"root\" ? node.children[0] : node;\n    return Boolean(head && (head.type === \"doctype\" || head.type === \"element\" && head.tagName.toLowerCase() === \"html\"));\n}\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Token.Location}\n *   `parse5` location.\n */ function createParse5Location(node) {\n    const start = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointStart)(node) || {\n        line: undefined,\n        column: undefined,\n        offset: undefined\n    };\n    const end = (0,unist_util_position__WEBPACK_IMPORTED_MODULE_2__.pointEnd)(node) || {\n        line: undefined,\n        column: undefined,\n        offset: undefined\n    };\n    /** @type {Record<keyof Token.Location, number | undefined>} */ const location = {\n        startLine: start.line,\n        startCol: start.column,\n        startOffset: start.offset,\n        endLine: end.line,\n        endCol: end.column,\n        endOffset: end.offset\n    };\n    // @ts-expect-error: unist point values can be `undefined` in hast, which\n    // `parse5` types donâ€™t want.\n    return location;\n}\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */ function cloneWithoutChildren(node) {\n    return \"children\" in node ? (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n        ...node,\n        children: []\n    }) : (0,_ungap_structured_clone__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(node);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/hast-util-raw/lib/index.js\n");

/***/ })

};
;