"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/css-selector-parser";
exports.ids = ["vendor-chunks/css-selector-parser"];
exports.modules = {

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/ast.js":
/*!**********************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/ast.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ast: () => (/* binding */ ast)\n/* harmony export */ });\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction astMethods(type) {\n    return function(generatorName, checkerName) {\n        var _a;\n        return _a = {}, _a[generatorName] = function(props) {\n            return __assign({\n                type: type\n            }, props);\n        }, _a[checkerName] = function(entity) {\n            return typeof entity === \"object\" && entity !== null && entity.type === type;\n        }, _a;\n    };\n}\n/**\n * AST structure generators and matchers.\n * For instance, `ast.selector({rules: [...]})` creates AstSelector and `ast.isSelector(...)` checks if\n * AstSelector was specified.\n *\n * @example\n *\n * // Represents CSS selector: ns|div#user-34.user.user-active[role=\"button\"]:lang(en)::before > *\n * const selector = ast.selector({\n *     rules: [\n *         ast.rule({\n *             items: [\n *                 ast.tagName({name: 'div', namespace: ast.namespaceName({name: 'ns'})}),\n *                 ast.id({name: 'user-34'}),\n *                 ast.className({name: 'user'}),\n *                 ast.className({name: 'user-active'}),\n *                 ast.attribute({\n *                     name: 'role',\n *                     operator: '=',\n *                     value: ast.string({value: 'button'})\n *                 }),\n *                 ast.pseudoClass({\n *                     name: 'lang',\n *                     argument: ast.string({value: 'en'})\n *                 }),\n *                 ast.pseudoElement({name: 'before'})\n *             ],\n *             nestedRule: ast.rule({combinator: '>', items: [ast.wildcardTag()]})\n *         })\n *     ]\n * });\n * console.log(ast.isSelector(selector)); // prints true\n * console.log(ast.isRule(selector)); // prints false\n */ var ast = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, astMethods(\"Selector\")(\"selector\", \"isSelector\")), astMethods(\"Rule\")(\"rule\", \"isRule\")), astMethods(\"TagName\")(\"tagName\", \"isTagName\")), astMethods(\"Id\")(\"id\", \"isId\")), astMethods(\"ClassName\")(\"className\", \"isClassName\")), astMethods(\"WildcardTag\")(\"wildcardTag\", \"isWildcardTag\")), astMethods(\"NamespaceName\")(\"namespaceName\", \"isNamespaceName\")), astMethods(\"WildcardNamespace\")(\"wildcardNamespace\", \"isWildcardNamespace\")), astMethods(\"NoNamespace\")(\"noNamespace\", \"isNoNamespace\")), astMethods(\"Attribute\")(\"attribute\", \"isAttribute\")), astMethods(\"PseudoClass\")(\"pseudoClass\", \"isPseudoClass\")), astMethods(\"PseudoElement\")(\"pseudoElement\", \"isPseudoElement\")), astMethods(\"String\")(\"string\", \"isString\")), astMethods(\"Formula\")(\"formula\", \"isFormula\")), astMethods(\"FormulaOfSelector\")(\"formulaOfSelector\", \"isFormulaOfSelector\")), astMethods(\"Substitution\")(\"substitution\", \"isSubstitution\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9hc3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUlBLFdBQVcsU0FBSyxJQUFJLFNBQUksQ0FBQ0EsUUFBUSxJQUFLO0lBQ3RDQSxXQUFXQyxPQUFPQyxNQUFNLElBQUksU0FBU0MsQ0FBQztRQUNsQyxJQUFLLElBQUlDLEdBQUdDLElBQUksR0FBR0MsSUFBSUMsVUFBVUMsTUFBTSxFQUFFSCxJQUFJQyxHQUFHRCxJQUFLO1lBQ2pERCxJQUFJRyxTQUFTLENBQUNGLEVBQUU7WUFDaEIsSUFBSyxJQUFJSSxLQUFLTCxFQUFHLElBQUlILE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQ3pETixDQUFDLENBQUNNLEVBQUUsR0FBR0wsQ0FBQyxDQUFDSyxFQUFFO1FBQ25CO1FBQ0EsT0FBT047SUFDWDtJQUNBLE9BQU9ILFNBQVNhLEtBQUssQ0FBQyxJQUFJLEVBQUVOO0FBQ2hDO0FBQ0EsU0FBU08sV0FBV0MsSUFBSTtJQUNwQixPQUFPLFNBQVVDLGFBQWEsRUFBRUMsV0FBVztRQUN2QyxJQUFJQztRQUNKLE9BQVFBLEtBQUssQ0FBQyxHQUNWQSxFQUFFLENBQUNGLGNBQWMsR0FBRyxTQUFVRyxLQUFLO1lBQUksT0FBUW5CLFNBQVM7Z0JBQUVlLE1BQU1BO1lBQUssR0FBR0k7UUFBUyxHQUNqRkQsRUFBRSxDQUFDRCxZQUFZLEdBQUcsU0FBVUcsTUFBTTtZQUM5QixPQUFPLE9BQU9BLFdBQVcsWUFBWUEsV0FBVyxRQUFRQSxPQUFPTCxJQUFJLEtBQUtBO1FBQzVFLEdBQ0FHO0lBQ1I7QUFDSjtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FpQ0MsR0FDTSxJQUFJRyxNQUFNckIsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBU0EsU0FBUyxDQUFDLEdBQUdjLFdBQVcsWUFBWSxZQUFZLGdCQUFnQkEsV0FBVyxRQUFRLFFBQVEsWUFBWUEsV0FBVyxXQUFXLFdBQVcsZUFBZUEsV0FBVyxNQUFNLE1BQU0sVUFBVUEsV0FBVyxhQUFhLGFBQWEsaUJBQWlCQSxXQUFXLGVBQWUsZUFBZSxtQkFBbUJBLFdBQVcsaUJBQWlCLGlCQUFpQixxQkFBcUJBLFdBQVcscUJBQXFCLHFCQUFxQix5QkFBeUJBLFdBQVcsZUFBZSxlQUFlLG1CQUFtQkEsV0FBVyxhQUFhLGFBQWEsaUJBQWlCQSxXQUFXLGVBQWUsZUFBZSxtQkFBbUJBLFdBQVcsaUJBQWlCLGlCQUFpQixxQkFBcUJBLFdBQVcsVUFBVSxVQUFVLGNBQWNBLFdBQVcsV0FBVyxXQUFXLGVBQWVBLFdBQVcscUJBQXFCLHFCQUFxQix5QkFBeUJBLFdBQVcsZ0JBQWdCLGdCQUFnQixtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250YWluZXJkX211bHRpbm90ZXMvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9hc3QuanM/MGQ0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuZnVuY3Rpb24gYXN0TWV0aG9kcyh0eXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChnZW5lcmF0b3JOYW1lLCBjaGVja2VyTmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW2dlbmVyYXRvck5hbWVdID0gZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiAoX19hc3NpZ24oeyB0eXBlOiB0eXBlIH0sIHByb3BzKSk7IH0sXG4gICAgICAgICAgICBfYVtjaGVja2VyTmFtZV0gPSBmdW5jdGlvbiAoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbnRpdHkgPT09ICdvYmplY3QnICYmIGVudGl0eSAhPT0gbnVsbCAmJiBlbnRpdHkudHlwZSA9PT0gdHlwZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfYSk7XG4gICAgfTtcbn1cbi8qKlxuICogQVNUIHN0cnVjdHVyZSBnZW5lcmF0b3JzIGFuZCBtYXRjaGVycy5cbiAqIEZvciBpbnN0YW5jZSwgYGFzdC5zZWxlY3Rvcih7cnVsZXM6IFsuLi5dfSlgIGNyZWF0ZXMgQXN0U2VsZWN0b3IgYW5kIGBhc3QuaXNTZWxlY3RvciguLi4pYCBjaGVja3MgaWZcbiAqIEFzdFNlbGVjdG9yIHdhcyBzcGVjaWZpZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBSZXByZXNlbnRzIENTUyBzZWxlY3RvcjogbnN8ZGl2I3VzZXItMzQudXNlci51c2VyLWFjdGl2ZVtyb2xlPVwiYnV0dG9uXCJdOmxhbmcoZW4pOjpiZWZvcmUgPiAqXG4gKiBjb25zdCBzZWxlY3RvciA9IGFzdC5zZWxlY3Rvcih7XG4gKiAgICAgcnVsZXM6IFtcbiAqICAgICAgICAgYXN0LnJ1bGUoe1xuICogICAgICAgICAgICAgaXRlbXM6IFtcbiAqICAgICAgICAgICAgICAgICBhc3QudGFnTmFtZSh7bmFtZTogJ2RpdicsIG5hbWVzcGFjZTogYXN0Lm5hbWVzcGFjZU5hbWUoe25hbWU6ICducyd9KX0pLFxuICogICAgICAgICAgICAgICAgIGFzdC5pZCh7bmFtZTogJ3VzZXItMzQnfSksXG4gKiAgICAgICAgICAgICAgICAgYXN0LmNsYXNzTmFtZSh7bmFtZTogJ3VzZXInfSksXG4gKiAgICAgICAgICAgICAgICAgYXN0LmNsYXNzTmFtZSh7bmFtZTogJ3VzZXItYWN0aXZlJ30pLFxuICogICAgICAgICAgICAgICAgIGFzdC5hdHRyaWJ1dGUoe1xuICogICAgICAgICAgICAgICAgICAgICBuYW1lOiAncm9sZScsXG4gKiAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiAnPScsXG4gKiAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhc3Quc3RyaW5nKHt2YWx1ZTogJ2J1dHRvbid9KVxuICogICAgICAgICAgICAgICAgIH0pLFxuICogICAgICAgICAgICAgICAgIGFzdC5wc2V1ZG9DbGFzcyh7XG4gKiAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdsYW5nJyxcbiAqICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQ6IGFzdC5zdHJpbmcoe3ZhbHVlOiAnZW4nfSlcbiAqICAgICAgICAgICAgICAgICB9KSxcbiAqICAgICAgICAgICAgICAgICBhc3QucHNldWRvRWxlbWVudCh7bmFtZTogJ2JlZm9yZSd9KVxuICogICAgICAgICAgICAgXSxcbiAqICAgICAgICAgICAgIG5lc3RlZFJ1bGU6IGFzdC5ydWxlKHtjb21iaW5hdG9yOiAnPicsIGl0ZW1zOiBbYXN0LndpbGRjYXJkVGFnKCldfSlcbiAqICAgICAgICAgfSlcbiAqICAgICBdXG4gKiB9KTtcbiAqIGNvbnNvbGUubG9nKGFzdC5pc1NlbGVjdG9yKHNlbGVjdG9yKSk7IC8vIHByaW50cyB0cnVlXG4gKiBjb25zb2xlLmxvZyhhc3QuaXNSdWxlKHNlbGVjdG9yKSk7IC8vIHByaW50cyBmYWxzZVxuICovXG5leHBvcnQgdmFyIGFzdCA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBhc3RNZXRob2RzKCdTZWxlY3RvcicpKCdzZWxlY3RvcicsICdpc1NlbGVjdG9yJykpLCBhc3RNZXRob2RzKCdSdWxlJykoJ3J1bGUnLCAnaXNSdWxlJykpLCBhc3RNZXRob2RzKCdUYWdOYW1lJykoJ3RhZ05hbWUnLCAnaXNUYWdOYW1lJykpLCBhc3RNZXRob2RzKCdJZCcpKCdpZCcsICdpc0lkJykpLCBhc3RNZXRob2RzKCdDbGFzc05hbWUnKSgnY2xhc3NOYW1lJywgJ2lzQ2xhc3NOYW1lJykpLCBhc3RNZXRob2RzKCdXaWxkY2FyZFRhZycpKCd3aWxkY2FyZFRhZycsICdpc1dpbGRjYXJkVGFnJykpLCBhc3RNZXRob2RzKCdOYW1lc3BhY2VOYW1lJykoJ25hbWVzcGFjZU5hbWUnLCAnaXNOYW1lc3BhY2VOYW1lJykpLCBhc3RNZXRob2RzKCdXaWxkY2FyZE5hbWVzcGFjZScpKCd3aWxkY2FyZE5hbWVzcGFjZScsICdpc1dpbGRjYXJkTmFtZXNwYWNlJykpLCBhc3RNZXRob2RzKCdOb05hbWVzcGFjZScpKCdub05hbWVzcGFjZScsICdpc05vTmFtZXNwYWNlJykpLCBhc3RNZXRob2RzKCdBdHRyaWJ1dGUnKSgnYXR0cmlidXRlJywgJ2lzQXR0cmlidXRlJykpLCBhc3RNZXRob2RzKCdQc2V1ZG9DbGFzcycpKCdwc2V1ZG9DbGFzcycsICdpc1BzZXVkb0NsYXNzJykpLCBhc3RNZXRob2RzKCdQc2V1ZG9FbGVtZW50JykoJ3BzZXVkb0VsZW1lbnQnLCAnaXNQc2V1ZG9FbGVtZW50JykpLCBhc3RNZXRob2RzKCdTdHJpbmcnKSgnc3RyaW5nJywgJ2lzU3RyaW5nJykpLCBhc3RNZXRob2RzKCdGb3JtdWxhJykoJ2Zvcm11bGEnLCAnaXNGb3JtdWxhJykpLCBhc3RNZXRob2RzKCdGb3JtdWxhT2ZTZWxlY3RvcicpKCdmb3JtdWxhT2ZTZWxlY3RvcicsICdpc0Zvcm11bGFPZlNlbGVjdG9yJykpLCBhc3RNZXRob2RzKCdTdWJzdGl0dXRpb24nKSgnc3Vic3RpdHV0aW9uJywgJ2lzU3Vic3RpdHV0aW9uJykpO1xuIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsImFzdE1ldGhvZHMiLCJ0eXBlIiwiZ2VuZXJhdG9yTmFtZSIsImNoZWNrZXJOYW1lIiwiX2EiLCJwcm9wcyIsImVudGl0eSIsImFzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/ast.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ast: () => (/* reexport safe */ _ast_js__WEBPACK_IMPORTED_MODULE_2__.ast),\n/* harmony export */   createParser: () => (/* reexport safe */ _parser_js__WEBPACK_IMPORTED_MODULE_0__.createParser),\n/* harmony export */   render: () => (/* reexport safe */ _render_js__WEBPACK_IMPORTED_MODULE_1__.render)\n/* harmony export */ });\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/parser.js\");\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/render.js\");\n/* harmony import */ var _ast_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ast.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/ast.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBMkM7QUFDTjtBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFpbmVyZF9tdWx0aW5vdGVzLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9tanMvaW5kZXguanM/NDg2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBjcmVhdGVQYXJzZXIgfSBmcm9tICcuL3BhcnNlci5qcyc7XG5leHBvcnQgeyByZW5kZXIgfSBmcm9tICcuL3JlbmRlci5qcyc7XG5leHBvcnQgeyBhc3QgfSBmcm9tICcuL2FzdC5qcyc7XG4iXSwibmFtZXMiOlsiY3JlYXRlUGFyc2VyIiwicmVuZGVyIiwiYXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/indexes.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/indexes.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMulticharIndex: () => (/* binding */ createMulticharIndex),\n/* harmony export */   createRegularIndex: () => (/* binding */ createRegularIndex),\n/* harmony export */   emptyMulticharIndex: () => (/* binding */ emptyMulticharIndex),\n/* harmony export */   emptyRegularIndex: () => (/* binding */ emptyRegularIndex)\n/* harmony export */ });\nvar emptyMulticharIndex = {};\nvar emptyRegularIndex = {};\nfunction extendIndex(item, index) {\n    var currentIndex = index;\n    for(var pos = 0; pos < item.length; pos++){\n        var isLast = pos === item.length - 1;\n        var char = item.charAt(pos);\n        var charIndex = currentIndex[char] || (currentIndex[char] = {\n            chars: {}\n        });\n        if (isLast) {\n            charIndex.self = item;\n        }\n        currentIndex = charIndex.chars;\n    }\n}\nfunction createMulticharIndex(items) {\n    if (items.length === 0) {\n        return emptyMulticharIndex;\n    }\n    var index = {};\n    for(var _i = 0, items_1 = items; _i < items_1.length; _i++){\n        var item = items_1[_i];\n        extendIndex(item, index);\n    }\n    return index;\n}\nfunction createRegularIndex(items) {\n    if (items.length === 0) {\n        return emptyRegularIndex;\n    }\n    var result = {};\n    for(var _i = 0, items_2 = items; _i < items_2.length; _i++){\n        var item = items_2[_i];\n        result[item] = true;\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9pbmRleGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxJQUFJQSxzQkFBc0IsQ0FBQyxFQUFFO0FBQzdCLElBQUlDLG9CQUFvQixDQUFDLEVBQUU7QUFDbEMsU0FBU0MsWUFBWUMsSUFBSSxFQUFFQyxLQUFLO0lBQzVCLElBQUlDLGVBQWVEO0lBQ25CLElBQUssSUFBSUUsTUFBTSxHQUFHQSxNQUFNSCxLQUFLSSxNQUFNLEVBQUVELE1BQU87UUFDeEMsSUFBSUUsU0FBU0YsUUFBUUgsS0FBS0ksTUFBTSxHQUFHO1FBQ25DLElBQUlFLE9BQU9OLEtBQUtPLE1BQU0sQ0FBQ0o7UUFDdkIsSUFBSUssWUFBWU4sWUFBWSxDQUFDSSxLQUFLLElBQUtKLENBQUFBLFlBQVksQ0FBQ0ksS0FBSyxHQUFHO1lBQUVHLE9BQU8sQ0FBQztRQUFFO1FBQ3hFLElBQUlKLFFBQVE7WUFDUkcsVUFBVUUsSUFBSSxHQUFHVjtRQUNyQjtRQUNBRSxlQUFlTSxVQUFVQyxLQUFLO0lBQ2xDO0FBQ0o7QUFDTyxTQUFTRSxxQkFBcUJDLEtBQUs7SUFDdEMsSUFBSUEsTUFBTVIsTUFBTSxLQUFLLEdBQUc7UUFDcEIsT0FBT1A7SUFDWDtJQUNBLElBQUlJLFFBQVEsQ0FBQztJQUNiLElBQUssSUFBSVksS0FBSyxHQUFHQyxVQUFVRixPQUFPQyxLQUFLQyxRQUFRVixNQUFNLEVBQUVTLEtBQU07UUFDekQsSUFBSWIsT0FBT2MsT0FBTyxDQUFDRCxHQUFHO1FBQ3RCZCxZQUFZQyxNQUFNQztJQUN0QjtJQUNBLE9BQU9BO0FBQ1g7QUFDTyxTQUFTYyxtQkFBbUJILEtBQUs7SUFDcEMsSUFBSUEsTUFBTVIsTUFBTSxLQUFLLEdBQUc7UUFDcEIsT0FBT047SUFDWDtJQUNBLElBQUlrQixTQUFTLENBQUM7SUFDZCxJQUFLLElBQUlILEtBQUssR0FBR0ksVUFBVUwsT0FBT0MsS0FBS0ksUUFBUWIsTUFBTSxFQUFFUyxLQUFNO1FBQ3pELElBQUliLE9BQU9pQixPQUFPLENBQUNKLEdBQUc7UUFDdEJHLE1BQU0sQ0FBQ2hCLEtBQUssR0FBRztJQUNuQjtJQUNBLE9BQU9nQjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udGFpbmVyZF9tdWx0aW5vdGVzLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3Rvci1wYXJzZXIvZGlzdC9tanMvaW5kZXhlcy5qcz82OGJhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZW1wdHlNdWx0aWNoYXJJbmRleCA9IHt9O1xuZXhwb3J0IHZhciBlbXB0eVJlZ3VsYXJJbmRleCA9IHt9O1xuZnVuY3Rpb24gZXh0ZW5kSW5kZXgoaXRlbSwgaW5kZXgpIHtcbiAgICB2YXIgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgZm9yICh2YXIgcG9zID0gMDsgcG9zIDwgaXRlbS5sZW5ndGg7IHBvcysrKSB7XG4gICAgICAgIHZhciBpc0xhc3QgPSBwb3MgPT09IGl0ZW0ubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGNoYXIgPSBpdGVtLmNoYXJBdChwb3MpO1xuICAgICAgICB2YXIgY2hhckluZGV4ID0gY3VycmVudEluZGV4W2NoYXJdIHx8IChjdXJyZW50SW5kZXhbY2hhcl0gPSB7IGNoYXJzOiB7fSB9KTtcbiAgICAgICAgaWYgKGlzTGFzdCkge1xuICAgICAgICAgICAgY2hhckluZGV4LnNlbGYgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRJbmRleCA9IGNoYXJJbmRleC5jaGFycztcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTXVsdGljaGFySW5kZXgoaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eU11bHRpY2hhckluZGV4O1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSB7fTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGl0ZW1zXzEgPSBpdGVtczsgX2kgPCBpdGVtc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zXzFbX2ldO1xuICAgICAgICBleHRlbmRJbmRleChpdGVtLCBpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWd1bGFySW5kZXgoaXRlbXMpIHtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVJlZ3VsYXJJbmRleDtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgaXRlbXNfMiA9IGl0ZW1zOyBfaSA8IGl0ZW1zXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpdGVtID0gaXRlbXNfMltfaV07XG4gICAgICAgIHJlc3VsdFtpdGVtXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOlsiZW1wdHlNdWx0aWNoYXJJbmRleCIsImVtcHR5UmVndWxhckluZGV4IiwiZXh0ZW5kSW5kZXgiLCJpdGVtIiwiaW5kZXgiLCJjdXJyZW50SW5kZXgiLCJwb3MiLCJsZW5ndGgiLCJpc0xhc3QiLCJjaGFyIiwiY2hhckF0IiwiY2hhckluZGV4IiwiY2hhcnMiLCJzZWxmIiwiY3JlYXRlTXVsdGljaGFySW5kZXgiLCJpdGVtcyIsIl9pIiwiaXRlbXNfMSIsImNyZWF0ZVJlZ3VsYXJJbmRleCIsInJlc3VsdCIsIml0ZW1zXzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/indexes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/parser.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/parser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\n/* harmony import */ var _indexes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./indexes.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/indexes.js\");\n/* harmony import */ var _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pseudo-signatures.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js\");\n/* harmony import */ var _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syntax-definitions.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/syntax-definitions.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/utils.js\");\n\n\n\n\nvar errorPrefix = \"css-selector-parser parse error: \";\n/**\n * Creates a parse function to be used later to parse CSS selectors.\n */ function createParser(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var _a = options.syntax, syntax = _a === void 0 ? \"latest\" : _a, substitutes = options.substitutes, _b = options.strict, strict = _b === void 0 ? true : _b, modules = options.modules;\n    var syntaxDefinition = typeof syntax === \"object\" ? syntax : _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.cssSyntaxDefinitions[syntax];\n    if (syntaxDefinition.baseSyntax) {\n        syntaxDefinition = (0,_syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.extendSyntaxDefinition)(_syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.cssSyntaxDefinitions[syntaxDefinition.baseSyntax], syntaxDefinition);\n    }\n    // Apply modules from syntax definition\n    if (syntaxDefinition.modules && syntaxDefinition.modules.length > 0) {\n        for(var _i = 0, _c = syntaxDefinition.modules; _i < _c.length; _i++){\n            var module_1 = _c[_i];\n            var moduleSyntax = _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.cssModules[module_1];\n            if (moduleSyntax) {\n                syntaxDefinition = (0,_syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.extendSyntaxDefinition)(moduleSyntax, syntaxDefinition);\n            }\n        }\n    }\n    // Apply additional modules if specified from options\n    if (modules && modules.length > 0) {\n        for(var _d = 0, modules_1 = modules; _d < modules_1.length; _d++){\n            var module_2 = modules_1[_d];\n            var moduleSyntax = _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.cssModules[module_2];\n            if (moduleSyntax) {\n                syntaxDefinition = (0,_syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.extendSyntaxDefinition)(moduleSyntax, syntaxDefinition);\n            }\n        }\n    }\n    var _e = syntaxDefinition.tag ? [\n        true,\n        Boolean((0,_syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.getXmlOptions)(syntaxDefinition.tag).wildcard)\n    ] : [\n        false,\n        false\n    ], tagNameEnabled = _e[0], tagNameWildcardEnabled = _e[1];\n    var idEnabled = Boolean(syntaxDefinition.ids);\n    var classNamesEnabled = Boolean(syntaxDefinition.classNames);\n    var namespaceEnabled = Boolean(syntaxDefinition.namespace);\n    var namespaceWildcardEnabled = syntaxDefinition.namespace && (syntaxDefinition.namespace === true || syntaxDefinition.namespace.wildcard === true);\n    if (namespaceEnabled && !tagNameEnabled) {\n        throw new Error(\"\".concat(errorPrefix, \"Namespaces cannot be enabled while tags are disabled.\"));\n    }\n    var substitutesEnabled = Boolean(substitutes);\n    var combinatorsIndex = syntaxDefinition.combinators ? (0,_indexes_js__WEBPACK_IMPORTED_MODULE_0__.createMulticharIndex)(syntaxDefinition.combinators) : _indexes_js__WEBPACK_IMPORTED_MODULE_0__.emptyMulticharIndex;\n    var _f = syntaxDefinition.attributes ? [\n        true,\n        syntaxDefinition.attributes.operators ? (0,_indexes_js__WEBPACK_IMPORTED_MODULE_0__.createMulticharIndex)(syntaxDefinition.attributes.operators) : _indexes_js__WEBPACK_IMPORTED_MODULE_0__.emptyMulticharIndex,\n        syntaxDefinition.attributes.caseSensitivityModifiers ? (0,_indexes_js__WEBPACK_IMPORTED_MODULE_0__.createRegularIndex)(syntaxDefinition.attributes.caseSensitivityModifiers) : _indexes_js__WEBPACK_IMPORTED_MODULE_0__.emptyRegularIndex,\n        syntaxDefinition.attributes.unknownCaseSensitivityModifiers === \"accept\"\n    ] : [\n        false,\n        _indexes_js__WEBPACK_IMPORTED_MODULE_0__.emptyMulticharIndex,\n        _indexes_js__WEBPACK_IMPORTED_MODULE_0__.emptyRegularIndex,\n        false\n    ], attributesEnabled = _f[0], attributesOperatorsIndex = _f[1], attributesCaseSensitivityModifiers = _f[2], attributesAcceptUnknownCaseSensitivityModifiers = _f[3];\n    var attributesCaseSensitivityModifiersEnabled = attributesAcceptUnknownCaseSensitivityModifiers || Object.keys(attributesCaseSensitivityModifiers).length > 0;\n    var _g = syntaxDefinition.pseudoClasses ? [\n        true,\n        syntaxDefinition.pseudoClasses.definitions ? (0,_pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.calculatePseudoSignatures)(syntaxDefinition.pseudoClasses.definitions) : _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.emptyPseudoSignatures,\n        syntaxDefinition.pseudoClasses.unknown === \"accept\"\n    ] : [\n        false,\n        _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.emptyPseudoSignatures,\n        false\n    ], pseudoClassesEnabled = _g[0], pseudoClassesDefinitions = _g[1], pseudoClassesAcceptUnknown = _g[2];\n    var _h = syntaxDefinition.pseudoElements ? [\n        true,\n        syntaxDefinition.pseudoElements.notation === \"singleColon\" || syntaxDefinition.pseudoElements.notation === \"both\",\n        !syntaxDefinition.pseudoElements.notation || syntaxDefinition.pseudoElements.notation === \"doubleColon\" || syntaxDefinition.pseudoElements.notation === \"both\",\n        syntaxDefinition.pseudoElements.definitions ? (0,_pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.calculatePseudoSignatures)(Array.isArray(syntaxDefinition.pseudoElements.definitions) ? {\n            NoArgument: syntaxDefinition.pseudoElements.definitions\n        } : syntaxDefinition.pseudoElements.definitions) : _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.emptyPseudoSignatures,\n        syntaxDefinition.pseudoElements.unknown === \"accept\"\n    ] : [\n        false,\n        false,\n        false,\n        _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.emptyPseudoSignatures,\n        false\n    ], pseudoElementsEnabled = _h[0], pseudoElementsSingleColonNotationEnabled = _h[1], pseudoElementsDoubleColonNotationEnabled = _h[2], pseudoElementsDefinitions = _h[3], pseudoElementsAcceptUnknown = _h[4];\n    var str = \"\";\n    var l = str.length;\n    var pos = 0;\n    var chr = \"\";\n    var is = function(comparison) {\n        return chr === comparison;\n    };\n    var isTagStart = function() {\n        return is(\"*\") || (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdentStart)(chr);\n    };\n    var rewind = function(newPos) {\n        pos = newPos;\n        chr = str.charAt(pos);\n    };\n    var next = function() {\n        pos++;\n        chr = str.charAt(pos);\n    };\n    var readAndNext = function() {\n        var current = chr;\n        pos++;\n        chr = str.charAt(pos);\n        return current;\n    };\n    /** @throws ParserError */ function fail(errorMessage) {\n        var position = Math.min(l - 1, pos);\n        var error = new Error(\"\".concat(errorPrefix).concat(errorMessage, \" Pos: \").concat(position, \".\"));\n        error.position = position;\n        error.name = \"ParserError\";\n        throw error;\n    }\n    function assert(condition, errorMessage) {\n        if (!condition) {\n            return fail(errorMessage);\n        }\n    }\n    var assertNonEof = function() {\n        assert(pos < l, \"Unexpected end of input.\");\n    };\n    var isEof = function() {\n        return pos >= l;\n    };\n    var pass = function(character) {\n        assert(pos < l, 'Expected \"'.concat(character, '\" but end of input reached.'));\n        assert(chr === character, 'Expected \"'.concat(character, '\" but \"').concat(chr, '\" found.'));\n        pos++;\n        chr = str.charAt(pos);\n    };\n    function matchMulticharIndex(index) {\n        var match = matchMulticharIndexPos(index, pos);\n        if (match) {\n            pos += match.length;\n            chr = str.charAt(pos);\n            return match;\n        }\n    }\n    function matchMulticharIndexPos(index, subPos) {\n        var char = str.charAt(subPos);\n        var charIndex = index[char];\n        if (charIndex) {\n            var subMatch = matchMulticharIndexPos(charIndex.chars, subPos + 1);\n            if (subMatch) {\n                return subMatch;\n            }\n            if (charIndex.self) {\n                return charIndex.self;\n            }\n        }\n    }\n    /**\n     * @see https://www.w3.org/TR/css-syntax/#hex-digit-diagram\n     */ function parseHex() {\n        var hex = readAndNext();\n        var count = 1;\n        while((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(chr) && count < _utils_js__WEBPACK_IMPORTED_MODULE_3__.maxHexLength){\n            hex += readAndNext();\n            count++;\n        }\n        skipSingleWhitespace();\n        return String.fromCharCode(parseInt(hex, 16));\n    }\n    /**\n     * @see https://www.w3.org/TR/css-syntax/#string-token-diagram\n     */ function parseString(quote) {\n        var result = \"\";\n        pass(quote);\n        while(pos < l){\n            if (is(quote)) {\n                next();\n                return result;\n            } else if (is(\"\\\\\")) {\n                next();\n                if (is(quote)) {\n                    result += quote;\n                    next();\n                } else if (chr === \"\\n\" || chr === \"\\f\") {\n                    next();\n                } else if (chr === \"\\r\") {\n                    next();\n                    if (is(\"\\n\")) {\n                        next();\n                    }\n                } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(chr)) {\n                    result += parseHex();\n                } else {\n                    result += chr;\n                    next();\n                }\n            } else {\n                result += chr;\n                next();\n            }\n        }\n        return result;\n    }\n    /**\n     * @see https://www.w3.org/TR/css-syntax/#ident-token-diagram\n     */ function parseIdentifier() {\n        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdentStart)(chr)) {\n            return null;\n        }\n        var result = \"\";\n        while(is(\"-\")){\n            result += chr;\n            next();\n        }\n        if (result === \"-\" && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdent)(chr) && !is(\"\\\\\")) {\n            fail(\"Identifiers cannot consist of a single hyphen.\");\n        }\n        if (strict && result.length >= 2) {\n            // Checking this only for strict mode since browsers work fine with these identifiers.\n            fail(\"Identifiers cannot start with two hyphens with strict mode on.\");\n        }\n        if (_utils_js__WEBPACK_IMPORTED_MODULE_3__.digitsChars[chr]) {\n            fail(\"Identifiers cannot start with hyphens followed by digits.\");\n        }\n        while(pos < l){\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdent)(chr)) {\n                result += readAndNext();\n            } else if (is(\"\\\\\")) {\n                next();\n                assertNonEof();\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(chr)) {\n                    result += parseHex();\n                } else {\n                    result += readAndNext();\n                }\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n    function parsePseudoClassString() {\n        var result = \"\";\n        while(pos < l){\n            if (is(\")\")) {\n                break;\n            } else if (is(\"\\\\\")) {\n                next();\n                if (isEof() && !strict) {\n                    return (result + \"\\\\\").trim();\n                }\n                assertNonEof();\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(chr)) {\n                    result += parseHex();\n                } else {\n                    result += readAndNext();\n                }\n            } else {\n                result += readAndNext();\n            }\n        }\n        return result.trim();\n    }\n    function skipSingleWhitespace() {\n        if (chr === \" \" || chr === \"\t\" || chr === \"\\f\" || chr === \"\\n\") {\n            next();\n            return;\n        }\n        if (chr === \"\\r\") {\n            next();\n        }\n        if (chr === \"\\n\") {\n            next();\n        }\n    }\n    function skipWhitespace() {\n        while(_utils_js__WEBPACK_IMPORTED_MODULE_3__.whitespaceChars[chr]){\n            next();\n        }\n    }\n    function parseSelector(relative) {\n        if (relative === void 0) {\n            relative = false;\n        }\n        skipWhitespace();\n        var rules = [\n            parseRule(relative)\n        ];\n        while(is(\",\")){\n            next();\n            skipWhitespace();\n            rules.push(parseRule(relative));\n        }\n        return {\n            type: \"Selector\",\n            rules: rules\n        };\n    }\n    function parseAttribute() {\n        pass(\"[\");\n        skipWhitespace();\n        var attr;\n        if (is(\"|\")) {\n            assert(namespaceEnabled, \"Namespaces are not enabled.\");\n            next();\n            var name_1 = parseIdentifier();\n            assert(name_1, \"Expected attribute name.\");\n            attr = {\n                type: \"Attribute\",\n                name: name_1,\n                namespace: {\n                    type: \"NoNamespace\"\n                }\n            };\n        } else if (is(\"*\")) {\n            assert(namespaceEnabled, \"Namespaces are not enabled.\");\n            assert(namespaceWildcardEnabled, \"Wildcard namespace is not enabled.\");\n            next();\n            pass(\"|\");\n            var name_2 = parseIdentifier();\n            assert(name_2, \"Expected attribute name.\");\n            attr = {\n                type: \"Attribute\",\n                name: name_2,\n                namespace: {\n                    type: \"WildcardNamespace\"\n                }\n            };\n        } else {\n            var identifier = parseIdentifier();\n            assert(identifier, \"Expected attribute name.\");\n            attr = {\n                type: \"Attribute\",\n                name: identifier\n            };\n            if (is(\"|\")) {\n                var savedPos = pos;\n                next();\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdentStart)(chr)) {\n                    assert(namespaceEnabled, \"Namespaces are not enabled.\");\n                    var name_3 = parseIdentifier();\n                    assert(name_3, \"Expected attribute name.\");\n                    attr = {\n                        type: \"Attribute\",\n                        name: name_3,\n                        namespace: {\n                            type: \"NamespaceName\",\n                            name: identifier\n                        }\n                    };\n                } else {\n                    rewind(savedPos);\n                }\n            }\n        }\n        assert(attr.name, \"Expected attribute name.\");\n        skipWhitespace();\n        if (isEof() && !strict) {\n            return attr;\n        }\n        if (is(\"]\")) {\n            next();\n        } else {\n            attr.operator = matchMulticharIndex(attributesOperatorsIndex);\n            assert(attr.operator, \"Expected a valid attribute selector operator.\");\n            skipWhitespace();\n            assertNonEof();\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_3__.quoteChars[chr]) {\n                attr.value = {\n                    type: \"String\",\n                    value: parseString(chr)\n                };\n            } else if (substitutesEnabled && is(\"$\")) {\n                next();\n                var name_4 = parseIdentifier();\n                assert(name_4, \"Expected substitute name.\");\n                attr.value = {\n                    type: \"Substitution\",\n                    name: name_4\n                };\n            } else {\n                var value = parseIdentifier();\n                assert(value, \"Expected attribute value.\");\n                attr.value = {\n                    type: \"String\",\n                    value: value\n                };\n            }\n            skipWhitespace();\n            if (isEof() && !strict) {\n                return attr;\n            }\n            if (!is(\"]\")) {\n                var caseSensitivityModifier = parseIdentifier();\n                assert(caseSensitivityModifier, \"Expected end of attribute selector.\");\n                attr.caseSensitivityModifier = caseSensitivityModifier;\n                assert(attributesCaseSensitivityModifiersEnabled, \"Attribute case sensitivity modifiers are not enabled.\");\n                assert(attributesAcceptUnknownCaseSensitivityModifiers || attributesCaseSensitivityModifiers[attr.caseSensitivityModifier], \"Unknown attribute case sensitivity modifier.\");\n                skipWhitespace();\n                if (isEof() && !strict) {\n                    return attr;\n                }\n            }\n            pass(\"]\");\n        }\n        return attr;\n    }\n    function parseNumber() {\n        var result = \"\";\n        while(_utils_js__WEBPACK_IMPORTED_MODULE_3__.digitsChars[chr]){\n            result += readAndNext();\n        }\n        assert(result !== \"\", \"Formula parse error.\");\n        return parseInt(result);\n    }\n    var isNumberStart = function() {\n        return is(\"-\") || is(\"+\") || _utils_js__WEBPACK_IMPORTED_MODULE_3__.digitsChars[chr];\n    };\n    function parseFormula() {\n        if (is(\"e\") || is(\"o\")) {\n            var ident = parseIdentifier();\n            if (ident === \"even\") {\n                skipWhitespace();\n                return [\n                    2,\n                    0\n                ];\n            }\n            if (ident === \"odd\") {\n                skipWhitespace();\n                return [\n                    2,\n                    1\n                ];\n            }\n        }\n        var firstNumber = null;\n        var firstNumberMultiplier = 1;\n        if (is(\"-\")) {\n            next();\n            firstNumberMultiplier = -1;\n        }\n        if (isNumberStart()) {\n            if (is(\"+\")) {\n                next();\n            }\n            firstNumber = parseNumber();\n            if (!is(\"\\\\\") && !is(\"n\")) {\n                return [\n                    0,\n                    firstNumber * firstNumberMultiplier\n                ];\n            }\n        }\n        if (firstNumber === null) {\n            firstNumber = 1;\n        }\n        firstNumber *= firstNumberMultiplier;\n        var identifier;\n        if (is(\"\\\\\")) {\n            next();\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(chr)) {\n                identifier = parseHex();\n            } else {\n                identifier = readAndNext();\n            }\n        } else {\n            identifier = readAndNext();\n        }\n        assert(identifier === \"n\", 'Formula parse error: expected \"n\".');\n        skipWhitespace();\n        if (is(\"+\") || is(\"-\")) {\n            var sign = is(\"+\") ? 1 : -1;\n            next();\n            skipWhitespace();\n            return [\n                firstNumber,\n                sign * parseNumber()\n            ];\n        } else {\n            return [\n                firstNumber,\n                0\n            ];\n        }\n    }\n    function parsePseudoArgument(pseudoName, type, signature) {\n        var argument;\n        if (is(\"(\")) {\n            next();\n            skipWhitespace();\n            if (substitutesEnabled && is(\"$\")) {\n                next();\n                var name_5 = parseIdentifier();\n                assert(name_5, \"Expected substitute name.\");\n                argument = {\n                    type: \"Substitution\",\n                    name: name_5\n                };\n            } else if (signature.type === \"String\") {\n                argument = {\n                    type: \"String\",\n                    value: parsePseudoClassString()\n                };\n                assert(argument.value, \"Expected \".concat(type, \" argument value.\"));\n            } else if (signature.type === \"Selector\") {\n                argument = parseSelector(true);\n            } else if (signature.type === \"Formula\") {\n                var _a = parseFormula(), a = _a[0], b = _a[1];\n                argument = {\n                    type: \"Formula\",\n                    a: a,\n                    b: b\n                };\n                if (signature.ofSelector) {\n                    skipWhitespace();\n                    if (is(\"o\") || is(\"\\\\\")) {\n                        var ident = parseIdentifier();\n                        assert(ident === \"of\", \"Formula of selector parse error.\");\n                        skipWhitespace();\n                        argument = {\n                            type: \"FormulaOfSelector\",\n                            a: a,\n                            b: b,\n                            selector: parseRule()\n                        };\n                    }\n                }\n            } else {\n                return fail(\"Invalid \".concat(type, \" signature.\"));\n            }\n            skipWhitespace();\n            if (isEof() && !strict) {\n                return argument;\n            }\n            pass(\")\");\n        } else {\n            assert(signature.optional, \"Argument is required for \".concat(type, ' \"').concat(pseudoName, '\".'));\n        }\n        return argument;\n    }\n    function parseTagName() {\n        if (is(\"*\")) {\n            assert(tagNameWildcardEnabled, \"Wildcard tag name is not enabled.\");\n            next();\n            return {\n                type: \"WildcardTag\"\n            };\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdentStart)(chr)) {\n            assert(tagNameEnabled, \"Tag names are not enabled.\");\n            var name_6 = parseIdentifier();\n            assert(name_6, \"Expected tag name.\");\n            return {\n                type: \"TagName\",\n                name: name_6\n            };\n        } else {\n            return fail(\"Expected tag name.\");\n        }\n    }\n    function parseTagNameWithNamespace() {\n        if (is(\"*\")) {\n            var savedPos = pos;\n            next();\n            if (!is(\"|\")) {\n                rewind(savedPos);\n                return parseTagName();\n            }\n            next();\n            if (!isTagStart()) {\n                rewind(savedPos);\n                return parseTagName();\n            }\n            assert(namespaceEnabled, \"Namespaces are not enabled.\");\n            assert(namespaceWildcardEnabled, \"Wildcard namespace is not enabled.\");\n            var tagName = parseTagName();\n            tagName.namespace = {\n                type: \"WildcardNamespace\"\n            };\n            return tagName;\n        } else if (is(\"|\")) {\n            assert(namespaceEnabled, \"Namespaces are not enabled.\");\n            next();\n            var tagName = parseTagName();\n            tagName.namespace = {\n                type: \"NoNamespace\"\n            };\n            return tagName;\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isIdentStart)(chr)) {\n            var identifier = parseIdentifier();\n            assert(identifier, \"Expected tag name.\");\n            if (!is(\"|\")) {\n                assert(tagNameEnabled, \"Tag names are not enabled.\");\n                return {\n                    type: \"TagName\",\n                    name: identifier\n                };\n            }\n            var savedPos = pos;\n            next();\n            if (!isTagStart()) {\n                rewind(savedPos);\n                return {\n                    type: \"TagName\",\n                    name: identifier\n                };\n            }\n            assert(namespaceEnabled, \"Namespaces are not enabled.\");\n            var tagName = parseTagName();\n            tagName.namespace = {\n                type: \"NamespaceName\",\n                name: identifier\n            };\n            return tagName;\n        } else {\n            return fail(\"Expected tag name.\");\n        }\n    }\n    function parseRule(relative) {\n        var _a, _b;\n        if (relative === void 0) {\n            relative = false;\n        }\n        var rule = {\n            type: \"Rule\",\n            items: []\n        };\n        if (relative) {\n            var combinator = matchMulticharIndex(combinatorsIndex);\n            if (combinator) {\n                rule.combinator = combinator;\n                skipWhitespace();\n            }\n        }\n        while(pos < l){\n            if (isTagStart()) {\n                assert(rule.items.length === 0, \"Unexpected tag/namespace start.\");\n                rule.items.push(parseTagNameWithNamespace());\n            } else if (is(\"|\")) {\n                var savedPos = pos;\n                next();\n                if (isTagStart()) {\n                    assert(rule.items.length === 0, \"Unexpected tag/namespace start.\");\n                    rewind(savedPos);\n                    rule.items.push(parseTagNameWithNamespace());\n                } else {\n                    rewind(savedPos);\n                    break;\n                }\n            } else if (is(\".\")) {\n                assert(classNamesEnabled, \"Class names are not enabled.\");\n                next();\n                var className = parseIdentifier();\n                assert(className, \"Expected class name.\");\n                rule.items.push({\n                    type: \"ClassName\",\n                    name: className\n                });\n            } else if (is(\"#\")) {\n                assert(idEnabled, \"IDs are not enabled.\");\n                next();\n                var idName = parseIdentifier();\n                assert(idName, \"Expected ID name.\");\n                rule.items.push({\n                    type: \"Id\",\n                    name: idName\n                });\n            } else if (is(\"[\")) {\n                assert(attributesEnabled, \"Attributes are not enabled.\");\n                rule.items.push(parseAttribute());\n            } else if (is(\":\")) {\n                var isDoubleColon = false;\n                var isPseudoElement = false;\n                next();\n                if (is(\":\")) {\n                    assert(pseudoElementsEnabled, \"Pseudo elements are not enabled.\");\n                    assert(pseudoElementsDoubleColonNotationEnabled, \"Pseudo elements double colon notation is not enabled.\");\n                    isDoubleColon = true;\n                    next();\n                }\n                var pseudoName = parseIdentifier();\n                assert(isDoubleColon || pseudoName, \"Expected pseudo-class name.\");\n                assert(!isDoubleColon || pseudoName, \"Expected pseudo-element name.\");\n                assert(pseudoName, \"Expected pseudo-class name.\");\n                if (!isDoubleColon || pseudoElementsAcceptUnknown || Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName)) {\n                // All good\n                } else {\n                    // Generate a helpful error message with location information\n                    var locations = _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.pseudoLocationIndex.pseudoElements[pseudoName];\n                    var errorMessage = 'Unknown pseudo-element \"'.concat(pseudoName, '\"');\n                    if (locations && locations.length > 0) {\n                        errorMessage += \". It is defined in: \".concat(locations.join(\", \"));\n                    }\n                    fail(errorMessage + \".\");\n                }\n                isPseudoElement = pseudoElementsEnabled && (isDoubleColon || !isDoubleColon && pseudoElementsSingleColonNotationEnabled && Object.prototype.hasOwnProperty.call(pseudoElementsDefinitions, pseudoName));\n                if (isPseudoElement) {\n                    var signature = (_a = pseudoElementsDefinitions[pseudoName]) !== null && _a !== void 0 ? _a : pseudoElementsAcceptUnknown && _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.defaultPseudoSignature;\n                    var pseudoElement = {\n                        type: \"PseudoElement\",\n                        name: pseudoName\n                    };\n                    var argument = parsePseudoArgument(pseudoName, \"pseudo-element\", signature);\n                    if (argument) {\n                        assert(argument.type !== \"Formula\" && argument.type !== \"FormulaOfSelector\", \"Pseudo-elements cannot have formula argument.\");\n                        pseudoElement.argument = argument;\n                    }\n                    rule.items.push(pseudoElement);\n                } else {\n                    assert(pseudoClassesEnabled, \"Pseudo-classes are not enabled.\");\n                    var signature = (_b = pseudoClassesDefinitions[pseudoName]) !== null && _b !== void 0 ? _b : pseudoClassesAcceptUnknown && _pseudo_signatures_js__WEBPACK_IMPORTED_MODULE_1__.defaultPseudoSignature;\n                    if (signature) {\n                    // All good\n                    } else {\n                        // Generate a helpful error message with location information\n                        var locations = _syntax_definitions_js__WEBPACK_IMPORTED_MODULE_2__.pseudoLocationIndex.pseudoClasses[pseudoName];\n                        var errorMessage = 'Unknown pseudo-class: \"'.concat(pseudoName, '\"');\n                        if (locations && locations.length > 0) {\n                            errorMessage += \". It is defined in: \".concat(locations.join(\", \"));\n                        }\n                        fail(errorMessage + \".\");\n                    }\n                    var argument = parsePseudoArgument(pseudoName, \"pseudo-class\", signature);\n                    var pseudoClass = {\n                        type: \"PseudoClass\",\n                        name: pseudoName\n                    };\n                    if (argument) {\n                        pseudoClass.argument = argument;\n                    }\n                    rule.items.push(pseudoClass);\n                }\n            } else {\n                break;\n            }\n        }\n        if (rule.items.length === 0) {\n            if (isEof()) {\n                return fail(\"Expected rule but end of input reached.\");\n            } else {\n                return fail('Expected rule but \"'.concat(chr, '\" found.'));\n            }\n        }\n        skipWhitespace();\n        if (!isEof() && !is(\",\") && !is(\")\")) {\n            var combinator = matchMulticharIndex(combinatorsIndex);\n            skipWhitespace();\n            rule.nestedRule = parseRule();\n            rule.nestedRule.combinator = combinator;\n        }\n        return rule;\n    }\n    return function(input) {\n        // noinspection SuspiciousTypeOfGuard\n        if (typeof input !== \"string\") {\n            throw new Error(\"\".concat(errorPrefix, \"Expected string input.\"));\n        }\n        str = input;\n        l = str.length;\n        pos = 0;\n        chr = str.charAt(0);\n        return parseSelector();\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculatePseudoSignatures: () => (/* binding */ calculatePseudoSignatures),\n/* harmony export */   defaultPseudoSignature: () => (/* binding */ defaultPseudoSignature),\n/* harmony export */   emptyPseudoSignatures: () => (/* binding */ emptyPseudoSignatures),\n/* harmony export */   inverseCategories: () => (/* binding */ inverseCategories)\n/* harmony export */ });\nvar emptyPseudoSignatures = {};\nvar defaultPseudoSignature = {\n    type: \"String\",\n    optional: true\n};\nfunction calculatePseudoSignature(types) {\n    var result = {\n        type: \"NoArgument\",\n        optional: false\n    };\n    function setResultType(type) {\n        if (result.type && result.type !== type && result.type !== \"NoArgument\") {\n            throw new Error('Conflicting pseudo-class argument type: \"'.concat(result.type, '\" vs \"').concat(type, '\".'));\n        }\n        result.type = type;\n    }\n    for(var _i = 0, types_1 = types; _i < types_1.length; _i++){\n        var type = types_1[_i];\n        if (type === \"NoArgument\") {\n            result.optional = true;\n        }\n        if (type === \"Formula\") {\n            setResultType(\"Formula\");\n        }\n        if (type === \"FormulaOfSelector\") {\n            setResultType(\"Formula\");\n            result.ofSelector = true;\n        }\n        if (type === \"String\") {\n            setResultType(\"String\");\n        }\n        if (type === \"Selector\") {\n            setResultType(\"Selector\");\n        }\n    }\n    return result;\n}\nfunction inverseCategories(obj) {\n    var result = {};\n    for(var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++){\n        var category = _a[_i];\n        var items = obj[category];\n        if (items) {\n            for(var _b = 0, _c = items; _b < _c.length; _b++){\n                var item = _c[_b];\n                (result[item] || (result[item] = [])).push(category);\n            }\n        }\n    }\n    return result;\n}\nfunction calculatePseudoSignatures(definitions) {\n    var pseudoClassesToArgumentTypes = inverseCategories(definitions);\n    var result = {};\n    for(var _i = 0, _a = Object.keys(pseudoClassesToArgumentTypes); _i < _a.length; _i++){\n        var pseudoClass = _a[_i];\n        var argumentTypes = pseudoClassesToArgumentTypes[pseudoClass];\n        if (argumentTypes) {\n            result[pseudoClass] = calculatePseudoSignature(argumentTypes);\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9wc2V1ZG8tc2lnbmF0dXJlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sSUFBSUEsd0JBQXdCLENBQUMsRUFBRTtBQUMvQixJQUFJQyx5QkFBeUI7SUFDaENDLE1BQU07SUFDTkMsVUFBVTtBQUNkLEVBQUU7QUFDRixTQUFTQyx5QkFBeUJDLEtBQUs7SUFDbkMsSUFBSUMsU0FBUztRQUNUSixNQUFNO1FBQ05DLFVBQVU7SUFDZDtJQUNBLFNBQVNJLGNBQWNMLElBQUk7UUFDdkIsSUFBSUksT0FBT0osSUFBSSxJQUFJSSxPQUFPSixJQUFJLEtBQUtBLFFBQVFJLE9BQU9KLElBQUksS0FBSyxjQUFjO1lBQ3JFLE1BQU0sSUFBSU0sTUFBTSw0Q0FBNkNDLE1BQU0sQ0FBQ0gsT0FBT0osSUFBSSxFQUFFLFVBQVlPLE1BQU0sQ0FBQ1AsTUFBTTtRQUM5RztRQUNBSSxPQUFPSixJQUFJLEdBQUdBO0lBQ2xCO0lBQ0EsSUFBSyxJQUFJUSxLQUFLLEdBQUdDLFVBQVVOLE9BQU9LLEtBQUtDLFFBQVFDLE1BQU0sRUFBRUYsS0FBTTtRQUN6RCxJQUFJUixPQUFPUyxPQUFPLENBQUNELEdBQUc7UUFDdEIsSUFBSVIsU0FBUyxjQUFjO1lBQ3ZCSSxPQUFPSCxRQUFRLEdBQUc7UUFDdEI7UUFDQSxJQUFJRCxTQUFTLFdBQVc7WUFDcEJLLGNBQWM7UUFDbEI7UUFDQSxJQUFJTCxTQUFTLHFCQUFxQjtZQUM5QkssY0FBYztZQUNkRCxPQUFPTyxVQUFVLEdBQUc7UUFDeEI7UUFDQSxJQUFJWCxTQUFTLFVBQVU7WUFDbkJLLGNBQWM7UUFDbEI7UUFDQSxJQUFJTCxTQUFTLFlBQVk7WUFDckJLLGNBQWM7UUFDbEI7SUFDSjtJQUNBLE9BQU9EO0FBQ1g7QUFDTyxTQUFTUSxrQkFBa0JDLEdBQUc7SUFDakMsSUFBSVQsU0FBUyxDQUFDO0lBQ2QsSUFBSyxJQUFJSSxLQUFLLEdBQUdNLEtBQUtDLE9BQU9DLElBQUksQ0FBQ0gsTUFBTUwsS0FBS00sR0FBR0osTUFBTSxFQUFFRixLQUFNO1FBQzFELElBQUlTLFdBQVdILEVBQUUsQ0FBQ04sR0FBRztRQUNyQixJQUFJVSxRQUFRTCxHQUFHLENBQUNJLFNBQVM7UUFDekIsSUFBSUMsT0FBTztZQUNQLElBQUssSUFBSUMsS0FBSyxHQUFHQyxLQUFLRixPQUFPQyxLQUFLQyxHQUFHVixNQUFNLEVBQUVTLEtBQU07Z0JBQy9DLElBQUlFLE9BQU9ELEVBQUUsQ0FBQ0QsR0FBRztnQkFDaEJmLENBQUFBLE1BQU0sQ0FBQ2lCLEtBQUssSUFBS2pCLENBQUFBLE1BQU0sQ0FBQ2lCLEtBQUssR0FBRyxFQUFFLEdBQUdDLElBQUksQ0FBQ0w7WUFDL0M7UUFDSjtJQUNKO0lBQ0EsT0FBT2I7QUFDWDtBQUNPLFNBQVNtQiwwQkFBMEJDLFdBQVc7SUFDakQsSUFBSUMsK0JBQStCYixrQkFBa0JZO0lBQ3JELElBQUlwQixTQUFTLENBQUM7SUFDZCxJQUFLLElBQUlJLEtBQUssR0FBR00sS0FBS0MsT0FBT0MsSUFBSSxDQUFDUywrQkFBK0JqQixLQUFLTSxHQUFHSixNQUFNLEVBQUVGLEtBQU07UUFDbkYsSUFBSWtCLGNBQWNaLEVBQUUsQ0FBQ04sR0FBRztRQUN4QixJQUFJbUIsZ0JBQWdCRiw0QkFBNEIsQ0FBQ0MsWUFBWTtRQUM3RCxJQUFJQyxlQUFlO1lBQ2Z2QixNQUFNLENBQUNzQixZQUFZLEdBQUd4Qix5QkFBeUJ5QjtRQUNuRDtJQUNKO0lBQ0EsT0FBT3ZCO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb250YWluZXJkX211bHRpbm90ZXMvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdG9yLXBhcnNlci9kaXN0L21qcy9wc2V1ZG8tc2lnbmF0dXJlcy5qcz9iNTE3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgZW1wdHlQc2V1ZG9TaWduYXR1cmVzID0ge307XG5leHBvcnQgdmFyIGRlZmF1bHRQc2V1ZG9TaWduYXR1cmUgPSB7XG4gICAgdHlwZTogJ1N0cmluZycsXG4gICAgb3B0aW9uYWw6IHRydWVcbn07XG5mdW5jdGlvbiBjYWxjdWxhdGVQc2V1ZG9TaWduYXR1cmUodHlwZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiAnTm9Bcmd1bWVudCcsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZVxuICAgIH07XG4gICAgZnVuY3Rpb24gc2V0UmVzdWx0VHlwZSh0eXBlKSB7XG4gICAgICAgIGlmIChyZXN1bHQudHlwZSAmJiByZXN1bHQudHlwZSAhPT0gdHlwZSAmJiByZXN1bHQudHlwZSAhPT0gJ05vQXJndW1lbnQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25mbGljdGluZyBwc2V1ZG8tY2xhc3MgYXJndW1lbnQgdHlwZTogXFxcIlwiLmNvbmNhdChyZXN1bHQudHlwZSwgXCJcXFwiIHZzIFxcXCJcIikuY29uY2F0KHR5cGUsIFwiXFxcIi5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwLCB0eXBlc18xID0gdHlwZXM7IF9pIDwgdHlwZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc18xW19pXTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdOb0FyZ3VtZW50Jykge1xuICAgICAgICAgICAgcmVzdWx0Lm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ0Zvcm11bGEnKSB7XG4gICAgICAgICAgICBzZXRSZXN1bHRUeXBlKCdGb3JtdWxhJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdGb3JtdWxhT2ZTZWxlY3RvcicpIHtcbiAgICAgICAgICAgIHNldFJlc3VsdFR5cGUoJ0Zvcm11bGEnKTtcbiAgICAgICAgICAgIHJlc3VsdC5vZlNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgICAgICAgIHNldFJlc3VsdFR5cGUoJ1N0cmluZycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnU2VsZWN0b3InKSB7XG4gICAgICAgICAgICBzZXRSZXN1bHRUeXBlKCdTZWxlY3RvcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZUNhdGVnb3JpZXMob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhvYmopOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgY2F0ZWdvcnkgPSBfYVtfaV07XG4gICAgICAgIHZhciBpdGVtcyA9IG9ialtjYXRlZ29yeV07XG4gICAgICAgIGlmIChpdGVtcykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IGl0ZW1zOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX2NbX2JdO1xuICAgICAgICAgICAgICAgIChyZXN1bHRbaXRlbV0gfHwgKHJlc3VsdFtpdGVtXSA9IFtdKSkucHVzaChjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVQc2V1ZG9TaWduYXR1cmVzKGRlZmluaXRpb25zKSB7XG4gICAgdmFyIHBzZXVkb0NsYXNzZXNUb0FyZ3VtZW50VHlwZXMgPSBpbnZlcnNlQ2F0ZWdvcmllcyhkZWZpbml0aW9ucyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhwc2V1ZG9DbGFzc2VzVG9Bcmd1bWVudFR5cGVzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHBzZXVkb0NsYXNzID0gX2FbX2ldO1xuICAgICAgICB2YXIgYXJndW1lbnRUeXBlcyA9IHBzZXVkb0NsYXNzZXNUb0FyZ3VtZW50VHlwZXNbcHNldWRvQ2xhc3NdO1xuICAgICAgICBpZiAoYXJndW1lbnRUeXBlcykge1xuICAgICAgICAgICAgcmVzdWx0W3BzZXVkb0NsYXNzXSA9IGNhbGN1bGF0ZVBzZXVkb1NpZ25hdHVyZShhcmd1bWVudFR5cGVzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbImVtcHR5UHNldWRvU2lnbmF0dXJlcyIsImRlZmF1bHRQc2V1ZG9TaWduYXR1cmUiLCJ0eXBlIiwib3B0aW9uYWwiLCJjYWxjdWxhdGVQc2V1ZG9TaWduYXR1cmUiLCJ0eXBlcyIsInJlc3VsdCIsInNldFJlc3VsdFR5cGUiLCJFcnJvciIsImNvbmNhdCIsIl9pIiwidHlwZXNfMSIsImxlbmd0aCIsIm9mU2VsZWN0b3IiLCJpbnZlcnNlQ2F0ZWdvcmllcyIsIm9iaiIsIl9hIiwiT2JqZWN0Iiwia2V5cyIsImNhdGVnb3J5IiwiaXRlbXMiLCJfYiIsIl9jIiwiaXRlbSIsInB1c2giLCJjYWxjdWxhdGVQc2V1ZG9TaWduYXR1cmVzIiwiZGVmaW5pdGlvbnMiLCJwc2V1ZG9DbGFzc2VzVG9Bcmd1bWVudFR5cGVzIiwicHNldWRvQ2xhc3MiLCJhcmd1bWVudFR5cGVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/pseudo-signatures.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/render.js":
/*!*************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/render.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   render: () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/css-selector-parser/dist/mjs/utils.js\");\n\nvar errorPrefix = \"css-selector-parser render error: \";\nfunction renderNamespace(namespace) {\n    if (namespace.type === \"WildcardNamespace\") {\n        return \"*|\";\n    } else if (namespace.type === \"NamespaceName\") {\n        return \"\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(namespace.name), \"|\");\n    } else if (namespace.type === \"NoNamespace\") {\n        return \"|\";\n    }\n    throw new Error(\"\".concat(errorPrefix, \"Unknown namespace type: \").concat(namespace.type, \".\"));\n}\nfunction renderSubstitution(sub) {\n    return \"$\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(sub.name));\n}\nfunction renderFormula(a, b) {\n    if (a) {\n        var result = \"\".concat(a === 1 ? \"\" : a === -1 ? \"-\" : a, \"n\");\n        if (b) {\n            result += \"\".concat(b > 0 ? \"+\" : \"\").concat(b);\n        }\n        return result;\n    } else {\n        return String(b);\n    }\n}\n/**\n * Renders CSS Selector AST back to a string.\n *\n * @example\n *\n * import {ast, render} from 'css-selector-parser';\n *\n * const selector = ast.selector({\n *     rules: [\n *         ast.rule({\n *             items: [\n *                 ast.tagName({name: 'a'}),\n *                 ast.id({name: 'user-23'}),\n *                 ast.className({name: 'user'}),\n *                 ast.pseudoClass({name: 'visited'}),\n *                 ast.pseudoElement({name: 'before'})\n *             ]\n *         })\n *     ]\n * });\n *\n * console.log(render(selector)); // a#user-23.user:visited::before\n */ function render(entity) {\n    if (entity.type === \"Selector\") {\n        return entity.rules.map(render).join(\", \");\n    }\n    if (entity.type === \"Rule\") {\n        var result = \"\";\n        var items = entity.items, combinator = entity.combinator, nestedRule = entity.nestedRule;\n        if (combinator) {\n            result += \"\".concat(combinator, \" \");\n        }\n        for(var _i = 0, items_1 = items; _i < items_1.length; _i++){\n            var item = items_1[_i];\n            result += render(item);\n        }\n        if (nestedRule) {\n            result += \" \".concat(render(nestedRule));\n        }\n        return result;\n    } else if (entity.type === \"TagName\" || entity.type === \"WildcardTag\") {\n        var result = \"\";\n        var namespace = entity.namespace;\n        if (namespace) {\n            result += renderNamespace(namespace);\n        }\n        if (entity.type === \"TagName\") {\n            result += (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(entity.name);\n        } else if (entity.type === \"WildcardTag\") {\n            result += \"*\";\n        }\n        return result;\n    } else if (entity.type === \"Id\") {\n        return \"#\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(entity.name));\n    } else if (entity.type === \"ClassName\") {\n        return \".\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(entity.name));\n    } else if (entity.type === \"Attribute\") {\n        var name_1 = entity.name, namespace = entity.namespace, operator = entity.operator, value = entity.value, caseSensitivityModifier = entity.caseSensitivityModifier;\n        var result = \"[\";\n        if (namespace) {\n            result += renderNamespace(namespace);\n        }\n        result += (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(name_1);\n        if (operator && value) {\n            result += operator;\n            if (value.type === \"String\") {\n                result += (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeString)(value.value);\n            } else if (value.type === \"Substitution\") {\n                result += renderSubstitution(value);\n            } else {\n                throw new Error(\"Unknown attribute value type: \".concat(value.type, \".\"));\n            }\n            if (caseSensitivityModifier) {\n                result += \" \".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(caseSensitivityModifier));\n            }\n        }\n        result += \"]\";\n        return result;\n    } else if (entity.type === \"PseudoClass\") {\n        var name_2 = entity.name, argument = entity.argument;\n        var result = \":\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(name_2));\n        if (argument) {\n            result += \"(\".concat(argument.type === \"String\" ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(argument.value) : render(argument), \")\");\n        }\n        return result;\n    } else if (entity.type === \"PseudoElement\") {\n        var name_3 = entity.name, argument = entity.argument;\n        var result = \"::\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(name_3));\n        if (argument) {\n            result += \"(\".concat(argument.type === \"String\" ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(argument.value) : render(argument), \")\");\n        }\n        return result;\n    } else if (entity.type === \"String\") {\n        throw new Error(\"\".concat(errorPrefix, \"String cannot be rendered outside of context.\"));\n    } else if (entity.type === \"Formula\") {\n        return renderFormula(entity.a, entity.b);\n    } else if (entity.type === \"FormulaOfSelector\") {\n        return renderFormula(entity.a, entity.b) + \" of \" + render(entity.selector);\n    } else if (entity.type === \"Substitution\") {\n        return \"$\".concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.escapeIdentifier)(entity.name));\n    }\n    throw new Error(\"Unknown type specified to render method: \".concat(entity.type, \".\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/render.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/syntax-definitions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/syntax-definitions.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildPseudoLocationIndex: () => (/* binding */ buildPseudoLocationIndex),\n/* harmony export */   cssModules: () => (/* binding */ cssModules),\n/* harmony export */   cssSyntaxDefinitions: () => (/* binding */ cssSyntaxDefinitions),\n/* harmony export */   extendSyntaxDefinition: () => (/* binding */ extendSyntaxDefinition),\n/* harmony export */   getXmlOptions: () => (/* binding */ getXmlOptions),\n/* harmony export */   pseudoLocationIndex: () => (/* binding */ pseudoLocationIndex)\n/* harmony export */ });\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar emptyXmlOptions = {};\nvar defaultXmlOptions = {\n    wildcard: true\n};\nfunction getXmlOptions(param) {\n    if (param) {\n        if (typeof param === \"boolean\") {\n            return defaultXmlOptions;\n        } else {\n            return param;\n        }\n    } else {\n        return emptyXmlOptions;\n    }\n}\nfunction withMigration(migration, merge) {\n    return function(base, extension) {\n        return merge(migration(base), migration(extension));\n    };\n}\nfunction withNoNegative(merge) {\n    return function(base, extension) {\n        var result = merge(base, extension);\n        if (!result) {\n            throw new Error(\"Syntax definition cannot be null or undefined.\");\n        }\n        return result;\n    };\n}\nfunction withPositive(positive, merge) {\n    return function(base, extension) {\n        if (extension === true) {\n            return positive;\n        }\n        return merge(base === true ? positive : base, extension);\n    };\n}\nfunction mergeSection(values) {\n    return function(base, extension) {\n        if (!extension || !base) {\n            return extension;\n        }\n        if (typeof extension !== \"object\" || extension === null) {\n            throw new Error(\"Unexpected syntax definition extension type: \".concat(extension, \".\"));\n        }\n        var result = __assign({}, base);\n        for(var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++){\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (key === \"latest\") {\n                continue;\n            }\n            var mergeSchema = values[key];\n            result[key] = mergeSchema(base[key], value);\n        }\n        return result;\n    };\n}\nfunction replaceValueIfSpecified(base, extension) {\n    if (extension !== undefined) {\n        return extension;\n    }\n    return base;\n}\nfunction concatArray(base, extension) {\n    if (!extension) {\n        return base;\n    }\n    if (!base) {\n        return extension;\n    }\n    return base.concat(extension);\n}\nfunction mergeDefinitions(base, extension) {\n    if (!extension) {\n        return base;\n    }\n    if (!base) {\n        return extension;\n    }\n    var result = __assign({}, base);\n    for(var _i = 0, _a = Object.entries(extension); _i < _a.length; _i++){\n        var _b = _a[_i], key = _b[0], value = _b[1];\n        if (!value) {\n            delete result[key];\n            continue;\n        }\n        var baseValue = base[key];\n        if (!baseValue) {\n            result[key] = value;\n            continue;\n        }\n        result[key] = baseValue.concat(value);\n    }\n    return result;\n}\nvar extendSyntaxDefinition = withNoNegative(mergeSection({\n    baseSyntax: replaceValueIfSpecified,\n    modules: concatArray,\n    tag: withPositive(defaultXmlOptions, mergeSection({\n        wildcard: replaceValueIfSpecified\n    })),\n    ids: replaceValueIfSpecified,\n    classNames: replaceValueIfSpecified,\n    namespace: withPositive(defaultXmlOptions, mergeSection({\n        wildcard: replaceValueIfSpecified\n    })),\n    combinators: concatArray,\n    attributes: mergeSection({\n        operators: concatArray,\n        caseSensitivityModifiers: concatArray,\n        unknownCaseSensitivityModifiers: replaceValueIfSpecified\n    }),\n    pseudoClasses: mergeSection({\n        unknown: replaceValueIfSpecified,\n        definitions: mergeDefinitions\n    }),\n    pseudoElements: mergeSection({\n        unknown: replaceValueIfSpecified,\n        notation: replaceValueIfSpecified,\n        definitions: withMigration(function(definitions) {\n            return Array.isArray(definitions) ? {\n                NoArgument: definitions\n            } : definitions;\n        }, mergeDefinitions)\n    })\n}));\nvar css1SyntaxDefinition = {\n    tag: {},\n    ids: true,\n    classNames: true,\n    combinators: [],\n    pseudoElements: {\n        unknown: \"reject\",\n        notation: \"singleColon\",\n        definitions: [\n            \"first-letter\",\n            \"first-line\"\n        ]\n    },\n    pseudoClasses: {\n        unknown: \"reject\",\n        definitions: {\n            NoArgument: [\n                \"link\",\n                \"visited\",\n                \"active\"\n            ]\n        }\n    }\n};\nvar css2SyntaxDefinition = extendSyntaxDefinition(css1SyntaxDefinition, {\n    tag: {\n        wildcard: true\n    },\n    combinators: [\n        \">\",\n        \"+\"\n    ],\n    attributes: {\n        unknownCaseSensitivityModifiers: \"reject\",\n        operators: [\n            \"=\",\n            \"~=\",\n            \"|=\"\n        ]\n    },\n    pseudoElements: {\n        definitions: [\n            \"before\",\n            \"after\"\n        ]\n    },\n    pseudoClasses: {\n        unknown: \"reject\",\n        definitions: {\n            NoArgument: [\n                \"hover\",\n                \"focus\",\n                \"first-child\"\n            ],\n            String: [\n                \"lang\"\n            ]\n        }\n    }\n});\nvar selectors3SyntaxDefinition = extendSyntaxDefinition(css2SyntaxDefinition, {\n    namespace: {\n        wildcard: true\n    },\n    combinators: [\n        \"~\"\n    ],\n    attributes: {\n        operators: [\n            \"^=\",\n            \"$=\",\n            \"*=\"\n        ]\n    },\n    pseudoElements: {\n        notation: \"both\"\n    },\n    pseudoClasses: {\n        definitions: {\n            NoArgument: [\n                \"root\",\n                \"last-child\",\n                \"first-of-type\",\n                \"last-of-type\",\n                \"only-child\",\n                \"only-of-type\",\n                \"empty\",\n                \"target\",\n                \"enabled\",\n                \"disabled\",\n                \"checked\",\n                \"indeterminate\"\n            ],\n            Formula: [\n                \"nth-child\",\n                \"nth-last-child\",\n                \"nth-of-type\",\n                \"nth-last-of-type\"\n            ],\n            Selector: [\n                \"not\"\n            ]\n        }\n    }\n});\nvar selectors4SyntaxDefinition = extendSyntaxDefinition(selectors3SyntaxDefinition, {\n    combinators: [\n        \"||\"\n    ],\n    attributes: {\n        caseSensitivityModifiers: [\n            \"i\",\n            \"I\",\n            \"s\",\n            \"S\"\n        ]\n    },\n    pseudoClasses: {\n        definitions: {\n            NoArgument: [\n                \"any-link\",\n                \"local-link\",\n                \"target-within\",\n                \"scope\",\n                \"current\",\n                \"past\",\n                \"future\",\n                \"focus-within\",\n                \"focus-visible\",\n                \"read-write\",\n                \"read-only\",\n                \"placeholder-shown\",\n                \"default\",\n                \"valid\",\n                \"invalid\",\n                \"in-range\",\n                \"out-of-range\",\n                \"required\",\n                \"optional\",\n                \"blank\",\n                \"user-invalid\",\n                \"playing\",\n                \"paused\",\n                \"autofill\",\n                \"modal\",\n                \"fullscreen\",\n                \"picture-in-picture\",\n                \"defined\",\n                \"loading\",\n                \"popover-open\"\n            ],\n            Formula: [\n                \"nth-col\",\n                \"nth-last-col\"\n            ],\n            String: [\n                \"dir\"\n            ],\n            FormulaOfSelector: [\n                \"nth-child\",\n                \"nth-last-child\"\n            ],\n            Selector: [\n                \"current\",\n                \"is\",\n                \"where\",\n                \"has\",\n                \"state\"\n            ]\n        }\n    },\n    pseudoElements: {\n        definitions: {\n            NoArgument: [\n                \"marker\"\n            ],\n            Selector: [\n                \"part\"\n            ]\n        }\n    }\n});\n/**\n * CSS Modules with their syntax definitions.\n * These can be used to extend the parser with specific CSS modules.\n *\n * @example\n * // Using the css-position-3 module\n * createParser({ modules: ['css-position-3'] })\n */ var cssModules = {\n    \"css-position-1\": {\n        latest: false,\n        pseudoClasses: {\n            definitions: {\n                NoArgument: [\n                    \"static\",\n                    \"relative\",\n                    \"absolute\"\n                ]\n            }\n        }\n    },\n    \"css-position-2\": {\n        latest: false,\n        pseudoClasses: {\n            definitions: {\n                NoArgument: [\n                    \"static\",\n                    \"relative\",\n                    \"absolute\",\n                    \"fixed\"\n                ]\n            }\n        }\n    },\n    \"css-position-3\": {\n        latest: false,\n        pseudoClasses: {\n            definitions: {\n                NoArgument: [\n                    \"sticky\",\n                    \"fixed\",\n                    \"absolute\",\n                    \"relative\",\n                    \"static\"\n                ]\n            }\n        }\n    },\n    \"css-position-4\": {\n        latest: true,\n        pseudoClasses: {\n            definitions: {\n                NoArgument: [\n                    \"sticky\",\n                    \"fixed\",\n                    \"absolute\",\n                    \"relative\",\n                    \"static\",\n                    \"initial\"\n                ]\n            }\n        }\n    },\n    \"css-scoping-1\": {\n        latest: true,\n        pseudoClasses: {\n            definitions: {\n                NoArgument: [\n                    \"host\",\n                    \"host-context\"\n                ],\n                Selector: [\n                    \"host\",\n                    \"host-context\"\n                ]\n            }\n        },\n        pseudoElements: {\n            definitions: {\n                Selector: [\n                    \"slotted\"\n                ]\n            }\n        }\n    },\n    \"css-pseudo-4\": {\n        latest: true,\n        pseudoElements: {\n            definitions: {\n                NoArgument: [\n                    \"marker\",\n                    \"selection\",\n                    \"target-text\",\n                    \"search-text\",\n                    \"spelling-error\",\n                    \"grammar-error\",\n                    \"backdrop\",\n                    \"file-selector-button\",\n                    \"prefix\",\n                    \"postfix\",\n                    \"placeholder\",\n                    \"details-content\"\n                ],\n                String: [\n                    \"highlight\"\n                ]\n            }\n        }\n    },\n    \"css-shadow-parts-1\": {\n        latest: true,\n        pseudoElements: {\n            definitions: {\n                Selector: [\n                    \"part\"\n                ]\n            }\n        }\n    }\n};\nvar latestSyntaxDefinition = __assign(__assign({}, selectors4SyntaxDefinition), {\n    modules: Object.entries(cssModules).filter(function(_a) {\n        var latest = _a[1].latest;\n        return latest;\n    }).map(function(_a) {\n        var name = _a[0];\n        return name;\n    })\n});\nvar progressiveSyntaxDefinition = extendSyntaxDefinition(latestSyntaxDefinition, {\n    pseudoElements: {\n        unknown: \"accept\"\n    },\n    pseudoClasses: {\n        unknown: \"accept\"\n    },\n    attributes: {\n        unknownCaseSensitivityModifiers: \"accept\"\n    }\n});\nvar cssSyntaxDefinitions = {\n    css1: css1SyntaxDefinition,\n    css2: css2SyntaxDefinition,\n    css3: selectors3SyntaxDefinition,\n    \"selectors-3\": selectors3SyntaxDefinition,\n    \"selectors-4\": selectors4SyntaxDefinition,\n    latest: latestSyntaxDefinition,\n    progressive: progressiveSyntaxDefinition\n};\n/**\n * Builds an index of where each pseudo-class and pseudo-element is defined\n * (in which CSS Level or CSS Module)\n */ function buildPseudoLocationIndex() {\n    var index = {\n        pseudoClasses: {},\n        pseudoElements: {}\n    };\n    // Add CSS Levels (excluding 'latest' and 'progressive')\n    var cssLevels = [\n        \"css1\",\n        \"css2\",\n        \"css3\",\n        \"selectors-3\",\n        \"selectors-4\"\n    ];\n    for(var _i = 0, cssLevels_1 = cssLevels; _i < cssLevels_1.length; _i++){\n        var level = cssLevels_1[_i];\n        var syntax = cssSyntaxDefinitions[level];\n        // Process pseudo-classes\n        if (syntax.pseudoClasses && typeof syntax.pseudoClasses === \"object\") {\n            var definitions = syntax.pseudoClasses.definitions;\n            if (definitions) {\n                for(var _a = 0, _b = Object.entries(definitions); _a < _b.length; _a++){\n                    var _c = _b[_a], names = _c[1];\n                    for(var _d = 0, names_1 = names; _d < names_1.length; _d++){\n                        var name_1 = names_1[_d];\n                        if (!index.pseudoClasses[name_1]) {\n                            index.pseudoClasses[name_1] = [];\n                        }\n                        if (!index.pseudoClasses[name_1].includes(level)) {\n                            index.pseudoClasses[name_1].push(level);\n                        }\n                    }\n                }\n            }\n        }\n        // Process pseudo-elements\n        if (syntax.pseudoElements && typeof syntax.pseudoElements === \"object\") {\n            var definitions = syntax.pseudoElements.definitions;\n            if (definitions) {\n                if (Array.isArray(definitions)) {\n                    for(var _e = 0, definitions_1 = definitions; _e < definitions_1.length; _e++){\n                        var name_2 = definitions_1[_e];\n                        if (!index.pseudoElements[name_2]) {\n                            index.pseudoElements[name_2] = [];\n                        }\n                        if (!index.pseudoElements[name_2].includes(level)) {\n                            index.pseudoElements[name_2].push(level);\n                        }\n                    }\n                } else {\n                    for(var _f = 0, _g = Object.values(definitions); _f < _g.length; _f++){\n                        var names = _g[_f];\n                        for(var _h = 0, names_2 = names; _h < names_2.length; _h++){\n                            var name_3 = names_2[_h];\n                            if (!index.pseudoElements[name_3]) {\n                                index.pseudoElements[name_3] = [];\n                            }\n                            if (!index.pseudoElements[name_3].includes(level)) {\n                                index.pseudoElements[name_3].push(level);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Add CSS Modules\n    for(var _j = 0, _k = Object.entries(cssModules); _j < _k.length; _j++){\n        var _l = _k[_j], moduleName = _l[0], moduleSyntax = _l[1];\n        // Process pseudo-classes\n        if (moduleSyntax.pseudoClasses && typeof moduleSyntax.pseudoClasses === \"object\") {\n            var definitions = moduleSyntax.pseudoClasses.definitions;\n            if (definitions) {\n                for(var _m = 0, _o = Object.values(definitions); _m < _o.length; _m++){\n                    var names = _o[_m];\n                    for(var _p = 0, names_3 = names; _p < names_3.length; _p++){\n                        var name_4 = names_3[_p];\n                        if (!index.pseudoClasses[name_4]) {\n                            index.pseudoClasses[name_4] = [];\n                        }\n                        if (!index.pseudoClasses[name_4].includes(moduleName)) {\n                            index.pseudoClasses[name_4].push(moduleName);\n                        }\n                    }\n                }\n            }\n        }\n        // Process pseudo-elements\n        if (moduleSyntax.pseudoElements && typeof moduleSyntax.pseudoElements === \"object\") {\n            var definitions = moduleSyntax.pseudoElements.definitions;\n            if (definitions) {\n                if (Array.isArray(definitions)) {\n                    for(var _q = 0, definitions_2 = definitions; _q < definitions_2.length; _q++){\n                        var name_5 = definitions_2[_q];\n                        if (!index.pseudoElements[name_5]) {\n                            index.pseudoElements[name_5] = [];\n                        }\n                        if (!index.pseudoElements[name_5].includes(moduleName)) {\n                            index.pseudoElements[name_5].push(moduleName);\n                        }\n                    }\n                } else {\n                    for(var _r = 0, _s = Object.values(definitions); _r < _s.length; _r++){\n                        var names = _s[_r];\n                        for(var _t = 0, names_4 = names; _t < names_4.length; _t++){\n                            var name_6 = names_4[_t];\n                            if (!index.pseudoElements[name_6]) {\n                                index.pseudoElements[name_6] = [];\n                            }\n                            if (!index.pseudoElements[name_6].includes(moduleName)) {\n                                index.pseudoElements[name_6].push(moduleName);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return index;\n}\n// Pre-build the index for faster lookup\nvar pseudoLocationIndex = buildPseudoLocationIndex();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/syntax-definitions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/css-selector-parser/dist/mjs/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/css-selector-parser/dist/mjs/utils.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   digitsChars: () => (/* binding */ digitsChars),\n/* harmony export */   escapeIdentifier: () => (/* binding */ escapeIdentifier),\n/* harmony export */   escapeString: () => (/* binding */ escapeString),\n/* harmony export */   identEscapeChars: () => (/* binding */ identEscapeChars),\n/* harmony export */   isHex: () => (/* binding */ isHex),\n/* harmony export */   isIdent: () => (/* binding */ isIdent),\n/* harmony export */   isIdentStart: () => (/* binding */ isIdentStart),\n/* harmony export */   maxHexLength: () => (/* binding */ maxHexLength),\n/* harmony export */   quoteChars: () => (/* binding */ quoteChars),\n/* harmony export */   stringRenderEscapeChars: () => (/* binding */ stringRenderEscapeChars),\n/* harmony export */   whitespaceChars: () => (/* binding */ whitespaceChars)\n/* harmony export */ });\nfunction isIdentStart(c) {\n    return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c === \"-\" || c === \"_\" || c === \"\\\\\" || c >= \"\\xa0\";\n}\nfunction isIdent(c) {\n    return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c >= \"0\" && c <= \"9\" || c === \"-\" || c === \"_\" || c >= \"\\xa0\";\n}\nfunction isHex(c) {\n    return c >= \"a\" && c <= \"f\" || c >= \"A\" && c <= \"F\" || c >= \"0\" && c <= \"9\";\n}\nvar identEscapeChars = {\n    \"!\": true,\n    '\"': true,\n    \"#\": true,\n    $: true,\n    \"%\": true,\n    \"&\": true,\n    \"'\": true,\n    \"(\": true,\n    \")\": true,\n    \"*\": true,\n    \"+\": true,\n    \",\": true,\n    \".\": true,\n    \"/\": true,\n    \";\": true,\n    \"<\": true,\n    \"=\": true,\n    \">\": true,\n    \"?\": true,\n    \"@\": true,\n    \"[\": true,\n    \"\\\\\": true,\n    \"]\": true,\n    \"^\": true,\n    \"`\": true,\n    \"{\": true,\n    \"|\": true,\n    \"}\": true,\n    \"~\": true\n};\nvar stringRenderEscapeChars = {\n    \"\\n\": true,\n    \"\\r\": true,\n    \"\t\": true,\n    \"\\f\": true,\n    \"\\v\": true\n};\nvar whitespaceChars = {\n    \" \": true,\n    \"\t\": true,\n    \"\\n\": true,\n    \"\\r\": true,\n    \"\\f\": true\n};\nvar quoteChars = {\n    '\"': true,\n    \"'\": true\n};\nvar digitsChars = {\n    0: true,\n    1: true,\n    2: true,\n    3: true,\n    4: true,\n    5: true,\n    6: true,\n    7: true,\n    8: true,\n    9: true\n};\nvar maxHexLength = 6;\nfunction escapeIdentifier(s) {\n    var len = s.length;\n    var result = \"\";\n    var i = 0;\n    while(i < len){\n        var chr = s.charAt(i);\n        if (identEscapeChars[chr] || chr === \"-\" && i === 1 && s.charAt(0) === \"-\") {\n            result += \"\\\\\" + chr;\n        } else {\n            if (chr === \"-\" || chr === \"_\" || chr >= \"A\" && chr <= \"Z\" || chr >= \"a\" && chr <= \"z\" || chr >= \"0\" && chr <= \"9\" && i !== 0 && !(i === 1 && s.charAt(0) === \"-\")) {\n                result += chr;\n            } else {\n                var charCode = chr.charCodeAt(0);\n                if ((charCode & 0xf800) === 0xd800) {\n                    var extraCharCode = s.charCodeAt(i++);\n                    if ((charCode & 0xfc00) !== 0xd800 || (extraCharCode & 0xfc00) !== 0xdc00) {\n                        throw Error(\"UCS-2(decode): illegal sequence\");\n                    }\n                    charCode = ((charCode & 0x3ff) << 10) + (extraCharCode & 0x3ff) + 0x10000;\n                }\n                result += \"\\\\\" + charCode.toString(16) + \" \";\n            }\n        }\n        i++;\n    }\n    return result.trim();\n}\nfunction escapeString(s) {\n    var len = s.length;\n    var result = \"\";\n    var i = 0;\n    while(i < len){\n        var chr = s.charAt(i);\n        if (chr === '\"') {\n            chr = '\\\\\"';\n        } else if (chr === \"\\\\\") {\n            chr = \"\\\\\\\\\";\n        } else if (stringRenderEscapeChars[chr]) {\n            chr = \"\\\\\" + chr.charCodeAt(0).toString(16) + (i === len - 1 ? \"\" : \" \");\n        }\n        result += chr;\n        i++;\n    }\n    return '\"'.concat(result, '\"');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/css-selector-parser/dist/mjs/utils.js\n");

/***/ })

};
;